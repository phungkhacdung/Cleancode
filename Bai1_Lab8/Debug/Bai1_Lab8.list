
Bai1_Lab8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001270  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001404  08001404  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001404  08001404  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08001404  08001404  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001404  08001404  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001404  08001404  00011404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001408  08001408  00011408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800140c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000024  08001430  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08001430  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005599  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000124d  00000000  00000000  000255ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000690  00000000  00000000  00026840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005e8  00000000  00000000  00026ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000d6b0  00000000  00000000  000274b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005812  00000000  00000000  00034b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00042257  00000000  00000000  0003a37a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007c5d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b48  00000000  00000000  0007c624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000024 	.word	0x20000024
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080013ec 	.word	0x080013ec

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000028 	.word	0x20000028
 80001d0:	080013ec 	.word	0x080013ec

080001d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d8:	4b16      	ldr	r3, [pc, #88]	; (8000234 <SystemInit+0x60>)
 80001da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001de:	4a15      	ldr	r2, [pc, #84]	; (8000234 <SystemInit+0x60>)
 80001e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001e8:	4b13      	ldr	r3, [pc, #76]	; (8000238 <SystemInit+0x64>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a12      	ldr	r2, [pc, #72]	; (8000238 <SystemInit+0x64>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001f4:	4b10      	ldr	r3, [pc, #64]	; (8000238 <SystemInit+0x64>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001fa:	4b0f      	ldr	r3, [pc, #60]	; (8000238 <SystemInit+0x64>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a0e      	ldr	r2, [pc, #56]	; (8000238 <SystemInit+0x64>)
 8000200:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000208:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800020a:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <SystemInit+0x64>)
 800020c:	4a0b      	ldr	r2, [pc, #44]	; (800023c <SystemInit+0x68>)
 800020e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000210:	4b09      	ldr	r3, [pc, #36]	; (8000238 <SystemInit+0x64>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a08      	ldr	r2, [pc, #32]	; (8000238 <SystemInit+0x64>)
 8000216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800021a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <SystemInit+0x64>)
 800021e:	2200      	movs	r2, #0
 8000220:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000222:	f000 f88f 	bl	8000344 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <SystemInit+0x60>)
 8000228:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800022c:	609a      	str	r2, [r3, #8]
#endif
}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	e000ed00 	.word	0xe000ed00
 8000238:	40023800 	.word	0x40023800
 800023c:	24003010 	.word	0x24003010

08000240 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000240:	b480      	push	{r7}
 8000242:	b087      	sub	sp, #28
 8000244:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000246:	2300      	movs	r3, #0
 8000248:	613b      	str	r3, [r7, #16]
 800024a:	2300      	movs	r3, #0
 800024c:	617b      	str	r3, [r7, #20]
 800024e:	2302      	movs	r3, #2
 8000250:	60fb      	str	r3, [r7, #12]
 8000252:	2300      	movs	r3, #0
 8000254:	60bb      	str	r3, [r7, #8]
 8000256:	2302      	movs	r3, #2
 8000258:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800025a:	4b35      	ldr	r3, [pc, #212]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 800025c:	689b      	ldr	r3, [r3, #8]
 800025e:	f003 030c 	and.w	r3, r3, #12
 8000262:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000264:	693b      	ldr	r3, [r7, #16]
 8000266:	2b08      	cmp	r3, #8
 8000268:	d011      	beq.n	800028e <SystemCoreClockUpdate+0x4e>
 800026a:	693b      	ldr	r3, [r7, #16]
 800026c:	2b08      	cmp	r3, #8
 800026e:	d844      	bhi.n	80002fa <SystemCoreClockUpdate+0xba>
 8000270:	693b      	ldr	r3, [r7, #16]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d003      	beq.n	800027e <SystemCoreClockUpdate+0x3e>
 8000276:	693b      	ldr	r3, [r7, #16]
 8000278:	2b04      	cmp	r3, #4
 800027a:	d004      	beq.n	8000286 <SystemCoreClockUpdate+0x46>
 800027c:	e03d      	b.n	80002fa <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800027e:	4b2d      	ldr	r3, [pc, #180]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000280:	4a2d      	ldr	r2, [pc, #180]	; (8000338 <SystemCoreClockUpdate+0xf8>)
 8000282:	601a      	str	r2, [r3, #0]
      break;
 8000284:	e03d      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000286:	4b2b      	ldr	r3, [pc, #172]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000288:	4a2c      	ldr	r2, [pc, #176]	; (800033c <SystemCoreClockUpdate+0xfc>)
 800028a:	601a      	str	r2, [r3, #0]
      break;
 800028c:	e039      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800028e:	4b28      	ldr	r3, [pc, #160]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	0d9b      	lsrs	r3, r3, #22
 8000294:	f003 0301 	and.w	r3, r3, #1
 8000298:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800029a:	4b25      	ldr	r3, [pc, #148]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002a2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d00c      	beq.n	80002c4 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002aa:	4a24      	ldr	r2, [pc, #144]	; (800033c <SystemCoreClockUpdate+0xfc>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80002b2:	4a1f      	ldr	r2, [pc, #124]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 80002b4:	6852      	ldr	r2, [r2, #4]
 80002b6:	0992      	lsrs	r2, r2, #6
 80002b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002bc:	fb02 f303 	mul.w	r3, r2, r3
 80002c0:	617b      	str	r3, [r7, #20]
 80002c2:	e00b      	b.n	80002dc <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002c4:	4a1c      	ldr	r2, [pc, #112]	; (8000338 <SystemCoreClockUpdate+0xf8>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002cc:	4a18      	ldr	r2, [pc, #96]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 80002ce:	6852      	ldr	r2, [r2, #4]
 80002d0:	0992      	lsrs	r2, r2, #6
 80002d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002d6:	fb02 f303 	mul.w	r3, r2, r3
 80002da:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80002dc:	4b14      	ldr	r3, [pc, #80]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	0c1b      	lsrs	r3, r3, #16
 80002e2:	f003 0303 	and.w	r3, r3, #3
 80002e6:	3301      	adds	r3, #1
 80002e8:	005b      	lsls	r3, r3, #1
 80002ea:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002ec:	697a      	ldr	r2, [r7, #20]
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002f4:	4a0f      	ldr	r2, [pc, #60]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 80002f6:	6013      	str	r3, [r2, #0]
      break;
 80002f8:	e003      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 80002fc:	4a0e      	ldr	r2, [pc, #56]	; (8000338 <SystemCoreClockUpdate+0xf8>)
 80002fe:	601a      	str	r2, [r3, #0]
      break;
 8000300:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000302:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	091b      	lsrs	r3, r3, #4
 8000308:	f003 030f 	and.w	r3, r3, #15
 800030c:	4a0c      	ldr	r2, [pc, #48]	; (8000340 <SystemCoreClockUpdate+0x100>)
 800030e:	5cd3      	ldrb	r3, [r2, r3]
 8000310:	b2db      	uxtb	r3, r3
 8000312:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000314:	4b07      	ldr	r3, [pc, #28]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	693b      	ldr	r3, [r7, #16]
 800031a:	fa22 f303 	lsr.w	r3, r2, r3
 800031e:	4a05      	ldr	r2, [pc, #20]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000320:	6013      	str	r3, [r2, #0]
}
 8000322:	bf00      	nop
 8000324:	371c      	adds	r7, #28
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40023800 	.word	0x40023800
 8000334:	20000000 	.word	0x20000000
 8000338:	00f42400 	.word	0x00f42400
 800033c:	017d7840 	.word	0x017d7840
 8000340:	20000004 	.word	0x20000004

08000344 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000348:	4b23      	ldr	r3, [pc, #140]	; (80003d8 <SetSysClock+0x94>)
 800034a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800034c:	4a22      	ldr	r2, [pc, #136]	; (80003d8 <SetSysClock+0x94>)
 800034e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000352:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SetSysClock+0x98>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a20      	ldr	r2, [pc, #128]	; (80003dc <SetSysClock+0x98>)
 800035a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800035e:	6013      	str	r3, [r2, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000360:	4b1d      	ldr	r3, [pc, #116]	; (80003d8 <SetSysClock+0x94>)
 8000362:	4a1d      	ldr	r2, [pc, #116]	; (80003d8 <SetSysClock+0x94>)
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	6093      	str	r3, [r2, #8]

  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000368:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <SetSysClock+0x94>)
 800036a:	4a1b      	ldr	r2, [pc, #108]	; (80003d8 <SetSysClock+0x94>)
 800036c:	689b      	ldr	r3, [r3, #8]
 800036e:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000370:	4b19      	ldr	r3, [pc, #100]	; (80003d8 <SetSysClock+0x94>)
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	4a18      	ldr	r2, [pc, #96]	; (80003d8 <SetSysClock+0x94>)
 8000376:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800037a:	6093      	str	r3, [r2, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800037c:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <SetSysClock+0x94>)
 800037e:	4a18      	ldr	r2, [pc, #96]	; (80003e0 <SetSysClock+0x9c>)
 8000380:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 8000382:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <SetSysClock+0x94>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a14      	ldr	r2, [pc, #80]	; (80003d8 <SetSysClock+0x94>)
 8000388:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800038c:	6013      	str	r3, [r2, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800038e:	bf00      	nop
 8000390:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <SetSysClock+0x94>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000398:	2b00      	cmp	r3, #0
 800039a:	d0f9      	beq.n	8000390 <SetSysClock+0x4c>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SetSysClock+0xa0>)
 800039e:	f240 6202 	movw	r2, #1538	; 0x602
 80003a2:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <SetSysClock+0x94>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	4a0b      	ldr	r2, [pc, #44]	; (80003d8 <SetSysClock+0x94>)
 80003aa:	f023 0303 	bic.w	r3, r3, #3
 80003ae:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 80003b0:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <SetSysClock+0x94>)
 80003b2:	689b      	ldr	r3, [r3, #8]
 80003b4:	4a08      	ldr	r2, [pc, #32]	; (80003d8 <SetSysClock+0x94>)
 80003b6:	f043 0302 	orr.w	r3, r3, #2
 80003ba:	6093      	str	r3, [r2, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80003bc:	bf00      	nop
 80003be:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <SetSysClock+0x94>)
 80003c0:	689b      	ldr	r3, [r3, #8]
 80003c2:	f003 030c 	and.w	r3, r3, #12
 80003c6:	2b08      	cmp	r3, #8
 80003c8:	d1f9      	bne.n	80003be <SetSysClock+0x7a>
}
 80003ca:	bf00      	nop
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40023800 	.word	0x40023800
 80003dc:	40007000 	.word	0x40007000
 80003e0:	08015410 	.word	0x08015410
 80003e4:	40023c00 	.word	0x40023c00

080003e8 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 80003ec:	2101      	movs	r1, #1
 80003ee:	f44f 7080 	mov.w	r0, #256	; 0x100
 80003f2:	f000 fba7 	bl	8000b44 <RCC_APB2PeriphResetCmd>

  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 80003f6:	2100      	movs	r1, #0
 80003f8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80003fc:	f000 fba2 	bl	8000b44 <RCC_APB2PeriphResetCmd>
}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}

08000404 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 800040e:	2300      	movs	r3, #0
 8000410:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign));
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	60fb      	str	r3, [r7, #12]

  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000422:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000426:	60fb      	str	r3, [r7, #12]

  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	791b      	ldrb	r3, [r3, #4]
 800042c:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000432:	4313      	orrs	r3, r2
 8000434:	68fa      	ldr	r2, [r7, #12]
 8000436:	4313      	orrs	r3, r2
 8000438:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	68fa      	ldr	r2, [r7, #12]
 800043e:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	689b      	ldr	r3, [r3, #8]
 8000444:	60fb      	str	r3, [r7, #12]

  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000446:	68fa      	ldr	r2, [r7, #12]
 8000448:	4b18      	ldr	r3, [pc, #96]	; (80004ac <ADC_Init+0xa8>)
 800044a:	4013      	ands	r3, r2
 800044c:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv |
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000456:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv |
 800045c:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	795b      	ldrb	r3, [r3, #5]
 8000462:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000464:	4313      	orrs	r3, r2
 8000466:	68fa      	ldr	r2, [r7, #12]
 8000468:	4313      	orrs	r3, r2
 800046a:	60fb      	str	r3, [r7, #12]

  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	68fa      	ldr	r2, [r7, #12]
 8000470:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000476:	60fb      	str	r3, [r7, #12]

  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800047e:	60fb      	str	r3, [r7, #12]

  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	7d1b      	ldrb	r3, [r3, #20]
 8000484:	3b01      	subs	r3, #1
 8000486:	b2da      	uxtb	r2, r3
 8000488:	7afb      	ldrb	r3, [r7, #11]
 800048a:	4313      	orrs	r3, r2
 800048c:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 800048e:	7afb      	ldrb	r3, [r7, #11]
 8000490:	051b      	lsls	r3, r3, #20
 8000492:	68fa      	ldr	r2, [r7, #12]
 8000494:	4313      	orrs	r3, r2
 8000496:	60fb      	str	r3, [r7, #12]

  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	68fa      	ldr	r2, [r7, #12]
 800049c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800049e:	bf00      	nop
 80004a0:	3714      	adds	r7, #20
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	c0fff7fd 	.word	0xc0fff7fd

080004b0 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 80004bc:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <ADC_CommonInit+0x48>)
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	60fb      	str	r3, [r7, #12]

  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 80004c2:	68fa      	ldr	r2, [r7, #12]
 80004c4:	4b0d      	ldr	r3, [pc, #52]	; (80004fc <ADC_CommonInit+0x4c>)
 80004c6:	4013      	ands	r3, r2
 80004c8:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode |
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler |
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	685b      	ldr	r3, [r3, #4]
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode |
 80004d2:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode |
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	689b      	ldr	r3, [r3, #8]
                        ADC_CommonInitStruct->ADC_Prescaler |
 80004d8:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	68db      	ldr	r3, [r3, #12]
                        ADC_CommonInitStruct->ADC_DMAAccessMode |
 80004de:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode |
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	4313      	orrs	r3, r2
 80004e4:	60fb      	str	r3, [r7, #12]

  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 80004e6:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <ADC_CommonInit+0x48>)
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	6053      	str	r3, [r2, #4]
}
 80004ec:	bf00      	nop
 80004ee:	3714      	adds	r7, #20
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	40012300 	.word	0x40012300
 80004fc:	fffc30e0 	.word	0xfffc30e0

08000500 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	460b      	mov	r3, r1
 800050a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800050c:	78fb      	ldrb	r3, [r7, #3]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d006      	beq.n	8000520 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	689b      	ldr	r3, [r3, #8]
 8000516:	f043 0201 	orr.w	r2, r3, #1
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 800051e:	e005      	b.n	800052c <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	f023 0201 	bic.w	r2, r3, #1
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	609a      	str	r2, [r3, #8]
}
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor and Vrefint channels.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d006      	beq.n	8000556 <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 8000548:	4b09      	ldr	r3, [pc, #36]	; (8000570 <ADC_TempSensorVrefintCmd+0x38>)
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	4a08      	ldr	r2, [pc, #32]	; (8000570 <ADC_TempSensorVrefintCmd+0x38>)
 800054e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000552:	6053      	str	r3, [r2, #4]
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
  }
}
 8000554:	e005      	b.n	8000562 <ADC_TempSensorVrefintCmd+0x2a>
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 8000556:	4b06      	ldr	r3, [pc, #24]	; (8000570 <ADC_TempSensorVrefintCmd+0x38>)
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	4a05      	ldr	r2, [pc, #20]	; (8000570 <ADC_TempSensorVrefintCmd+0x38>)
 800055c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000560:	6053      	str	r3, [r2, #4]
}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	40012300 	.word	0x40012300

08000574 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	4608      	mov	r0, r1
 800057e:	4611      	mov	r1, r2
 8000580:	461a      	mov	r2, r3
 8000582:	4603      	mov	r3, r0
 8000584:	70fb      	strb	r3, [r7, #3]
 8000586:	460b      	mov	r3, r1
 8000588:	70bb      	strb	r3, [r7, #2]
 800058a:	4613      	mov	r3, r2
 800058c:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	2300      	movs	r3, #0
 8000594:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000596:	78fb      	ldrb	r3, [r7, #3]
 8000598:	2b09      	cmp	r3, #9
 800059a:	d923      	bls.n	80005e4 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 80005a2:	78fb      	ldrb	r3, [r7, #3]
 80005a4:	f1a3 020a 	sub.w	r2, r3, #10
 80005a8:	4613      	mov	r3, r2
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	4413      	add	r3, r2
 80005ae:	2207      	movs	r2, #7
 80005b0:	fa02 f303 	lsl.w	r3, r2, r3
 80005b4:	60bb      	str	r3, [r7, #8]

    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	43db      	mvns	r3, r3
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	4013      	ands	r3, r2
 80005be:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80005c0:	7879      	ldrb	r1, [r7, #1]
 80005c2:	78fb      	ldrb	r3, [r7, #3]
 80005c4:	f1a3 020a 	sub.w	r2, r3, #10
 80005c8:	4613      	mov	r3, r2
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	4413      	add	r3, r2
 80005ce:	fa01 f303 	lsl.w	r3, r1, r3
 80005d2:	60bb      	str	r3, [r7, #8]

    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80005d4:	68fa      	ldr	r2, [r7, #12]
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	4313      	orrs	r3, r2
 80005da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	e01e      	b.n	8000622 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80005ea:	78fa      	ldrb	r2, [r7, #3]
 80005ec:	4613      	mov	r3, r2
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	4413      	add	r3, r2
 80005f2:	2207      	movs	r2, #7
 80005f4:	fa02 f303 	lsl.w	r3, r2, r3
 80005f8:	60bb      	str	r3, [r7, #8]

    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	43db      	mvns	r3, r3
 80005fe:	68fa      	ldr	r2, [r7, #12]
 8000600:	4013      	ands	r3, r2
 8000602:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000604:	7879      	ldrb	r1, [r7, #1]
 8000606:	78fa      	ldrb	r2, [r7, #3]
 8000608:	4613      	mov	r3, r2
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	4413      	add	r3, r2
 800060e:	fa01 f303 	lsl.w	r3, r1, r3
 8000612:	60bb      	str	r3, [r7, #8]

    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000614:	68fa      	ldr	r2, [r7, #12]
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	4313      	orrs	r3, r2
 800061a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000622:	78bb      	ldrb	r3, [r7, #2]
 8000624:	2b06      	cmp	r3, #6
 8000626:	d821      	bhi.n	800066c <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800062c:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 800062e:	78bb      	ldrb	r3, [r7, #2]
 8000630:	1e5a      	subs	r2, r3, #1
 8000632:	4613      	mov	r3, r2
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	4413      	add	r3, r2
 8000638:	221f      	movs	r2, #31
 800063a:	fa02 f303 	lsl.w	r3, r2, r3
 800063e:	60bb      	str	r3, [r7, #8]

    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	43db      	mvns	r3, r3
 8000644:	68fa      	ldr	r2, [r7, #12]
 8000646:	4013      	ands	r3, r2
 8000648:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 800064a:	78f9      	ldrb	r1, [r7, #3]
 800064c:	78bb      	ldrb	r3, [r7, #2]
 800064e:	1e5a      	subs	r2, r3, #1
 8000650:	4613      	mov	r3, r2
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	4413      	add	r3, r2
 8000656:	fa01 f303 	lsl.w	r3, r1, r3
 800065a:	60bb      	str	r3, [r7, #8]

    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800065c:	68fa      	ldr	r2, [r7, #12]
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	4313      	orrs	r3, r2
 8000662:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;

    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800066a:	e047      	b.n	80006fc <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 800066c:	78bb      	ldrb	r3, [r7, #2]
 800066e:	2b0c      	cmp	r3, #12
 8000670:	d821      	bhi.n	80006b6 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000678:	78bb      	ldrb	r3, [r7, #2]
 800067a:	1fda      	subs	r2, r3, #7
 800067c:	4613      	mov	r3, r2
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	4413      	add	r3, r2
 8000682:	221f      	movs	r2, #31
 8000684:	fa02 f303 	lsl.w	r3, r2, r3
 8000688:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	43db      	mvns	r3, r3
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	4013      	ands	r3, r2
 8000692:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000694:	78f9      	ldrb	r1, [r7, #3]
 8000696:	78bb      	ldrb	r3, [r7, #2]
 8000698:	1fda      	subs	r2, r3, #7
 800069a:	4613      	mov	r3, r2
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	4413      	add	r3, r2
 80006a0:	fa01 f303 	lsl.w	r3, r1, r3
 80006a4:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80006b4:	e022      	b.n	80006fc <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ba:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 80006bc:	78bb      	ldrb	r3, [r7, #2]
 80006be:	f1a3 020d 	sub.w	r2, r3, #13
 80006c2:	4613      	mov	r3, r2
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	4413      	add	r3, r2
 80006c8:	221f      	movs	r2, #31
 80006ca:	fa02 f303 	lsl.w	r3, r2, r3
 80006ce:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	43db      	mvns	r3, r3
 80006d4:	68fa      	ldr	r2, [r7, #12]
 80006d6:	4013      	ands	r3, r2
 80006d8:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 80006da:	78f9      	ldrb	r1, [r7, #3]
 80006dc:	78bb      	ldrb	r3, [r7, #2]
 80006de:	f1a3 020d 	sub.w	r2, r3, #13
 80006e2:	4613      	mov	r3, r2
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	4413      	add	r3, r2
 80006e8:	fa01 f303 	lsl.w	r3, r1, r3
 80006ec:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 80006ee:	68fa      	ldr	r2, [r7, #12]
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	4313      	orrs	r3, r2
 80006f4:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	68fa      	ldr	r2, [r7, #12]
 80006fa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80006fc:	bf00      	nop
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	689b      	ldr	r3, [r3, #8]
 8000714:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	609a      	str	r2, [r3, #8]
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000734:	b29b      	uxth	r3, r3
}
 8000736:	4618      	mov	r0, r3
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr

08000742 <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8000742:	b480      	push	{r7}
 8000744:	b085      	sub	sp, #20
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
 800074a:	460b      	mov	r3, r1
 800074c:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 800074e:	2300      	movs	r3, #0
 8000750:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	78fb      	ldrb	r3, [r7, #3]
 8000758:	4013      	ands	r3, r2
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 800075e:	2301      	movs	r3, #1
 8000760:	73fb      	strb	r3, [r7, #15]
 8000762:	e001      	b.n	8000768 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8000764:	2300      	movs	r3, #0
 8000766:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8000768:	7bfb      	ldrb	r3, [r7, #15]
}
 800076a:	4618      	mov	r0, r3
 800076c:	3714      	adds	r7, #20
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000776:	b480      	push	{r7}
 8000778:	b087      	sub	sp, #28
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
 800077e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	2300      	movs	r3, #0
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	e076      	b.n	8000880 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000792:	2201      	movs	r2, #1
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	fa02 f303 	lsl.w	r3, r2, r3
 800079a:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	693a      	ldr	r2, [r7, #16]
 80007a2:	4013      	ands	r3, r2
 80007a4:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80007a6:	68fa      	ldr	r2, [r7, #12]
 80007a8:	693b      	ldr	r3, [r7, #16]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d165      	bne.n	800087a <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	2103      	movs	r1, #3
 80007b8:	fa01 f303 	lsl.w	r3, r1, r3
 80007bc:	43db      	mvns	r3, r3
 80007be:	401a      	ands	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	791b      	ldrb	r3, [r3, #4]
 80007cc:	4619      	mov	r1, r3
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	fa01 f303 	lsl.w	r3, r1, r3
 80007d6:	431a      	orrs	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	791b      	ldrb	r3, [r3, #4]
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d003      	beq.n	80007ec <GPIO_Init+0x76>
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	791b      	ldrb	r3, [r3, #4]
 80007e8:	2b02      	cmp	r3, #2
 80007ea:	d12e      	bne.n	800084a <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	689a      	ldr	r2, [r3, #8]
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	2103      	movs	r1, #3
 80007f6:	fa01 f303 	lsl.w	r3, r1, r3
 80007fa:	43db      	mvns	r3, r3
 80007fc:	401a      	ands	r2, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	689a      	ldr	r2, [r3, #8]
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	795b      	ldrb	r3, [r3, #5]
 800080a:	4619      	mov	r1, r3
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	fa01 f303 	lsl.w	r3, r1, r3
 8000814:	431a      	orrs	r2, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	685a      	ldr	r2, [r3, #4]
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	b29b      	uxth	r3, r3
 8000822:	4619      	mov	r1, r3
 8000824:	2301      	movs	r3, #1
 8000826:	408b      	lsls	r3, r1
 8000828:	43db      	mvns	r3, r3
 800082a:	401a      	ands	r2, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	683a      	ldr	r2, [r7, #0]
 8000836:	7992      	ldrb	r2, [r2, #6]
 8000838:	4611      	mov	r1, r2
 800083a:	697a      	ldr	r2, [r7, #20]
 800083c:	b292      	uxth	r2, r2
 800083e:	fa01 f202 	lsl.w	r2, r1, r2
 8000842:	b292      	uxth	r2, r2
 8000844:	431a      	orrs	r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	68da      	ldr	r2, [r3, #12]
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	b29b      	uxth	r3, r3
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	2103      	movs	r1, #3
 8000856:	fa01 f303 	lsl.w	r3, r1, r3
 800085a:	43db      	mvns	r3, r3
 800085c:	401a      	ands	r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	68da      	ldr	r2, [r3, #12]
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	79db      	ldrb	r3, [r3, #7]
 800086a:	4619      	mov	r1, r3
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	fa01 f303 	lsl.w	r3, r1, r3
 8000874:	431a      	orrs	r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	3301      	adds	r3, #1
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	2b0f      	cmp	r3, #15
 8000884:	d985      	bls.n	8000792 <GPIO_Init+0x1c>
    }
  }
}
 8000886:	bf00      	nop
 8000888:	bf00      	nop
 800088a:	371c      	adds	r7, #28
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices.
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	807b      	strh	r3, [r7, #2]
 80008a0:	4613      	mov	r3, r2
 80008a2:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80008ac:	787a      	ldrb	r2, [r7, #1]
 80008ae:	887b      	ldrh	r3, [r7, #2]
 80008b0:	f003 0307 	and.w	r3, r3, #7
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80008bc:	887b      	ldrh	r3, [r7, #2]
 80008be:	08db      	lsrs	r3, r3, #3
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	461a      	mov	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3208      	adds	r2, #8
 80008c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008cc:	887b      	ldrh	r3, [r7, #2]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	210f      	movs	r1, #15
 80008d6:	fa01 f303 	lsl.w	r3, r1, r3
 80008da:	43db      	mvns	r3, r3
 80008dc:	8879      	ldrh	r1, [r7, #2]
 80008de:	08c9      	lsrs	r1, r1, #3
 80008e0:	b289      	uxth	r1, r1
 80008e2:	4608      	mov	r0, r1
 80008e4:	ea02 0103 	and.w	r1, r2, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f100 0208 	add.w	r2, r0, #8
 80008ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80008f2:	887b      	ldrh	r3, [r7, #2]
 80008f4:	08db      	lsrs	r3, r3, #3
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	461a      	mov	r2, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	3208      	adds	r2, #8
 80008fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000902:	68fa      	ldr	r2, [r7, #12]
 8000904:	4313      	orrs	r3, r2
 8000906:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000908:	887b      	ldrh	r3, [r7, #2]
 800090a:	08db      	lsrs	r3, r3, #3
 800090c:	b29b      	uxth	r3, r3
 800090e:	461a      	mov	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3208      	adds	r2, #8
 8000914:	68b9      	ldr	r1, [r7, #8]
 8000916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800091a:	bf00      	nop
 800091c:	3714      	adds	r7, #20
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
	...

08000928 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000928:	b480      	push	{r7}
 800092a:	b089      	sub	sp, #36	; 0x24
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000930:	2300      	movs	r3, #0
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
 800093c:	2302      	movs	r3, #2
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	2300      	movs	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	2302      	movs	r3, #2
 8000946:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000948:	4b4a      	ldr	r3, [pc, #296]	; (8000a74 <RCC_GetClocksFreq+0x14c>)
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	f003 030c 	and.w	r3, r3, #12
 8000950:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000952:	69bb      	ldr	r3, [r7, #24]
 8000954:	2b08      	cmp	r3, #8
 8000956:	d011      	beq.n	800097c <RCC_GetClocksFreq+0x54>
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	2b08      	cmp	r3, #8
 800095c:	d844      	bhi.n	80009e8 <RCC_GetClocksFreq+0xc0>
 800095e:	69bb      	ldr	r3, [r7, #24]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d003      	beq.n	800096c <RCC_GetClocksFreq+0x44>
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	2b04      	cmp	r3, #4
 8000968:	d004      	beq.n	8000974 <RCC_GetClocksFreq+0x4c>
 800096a:	e03d      	b.n	80009e8 <RCC_GetClocksFreq+0xc0>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a42      	ldr	r2, [pc, #264]	; (8000a78 <RCC_GetClocksFreq+0x150>)
 8000970:	601a      	str	r2, [r3, #0]
    break;
 8000972:	e03d      	b.n	80009f0 <RCC_GetClocksFreq+0xc8>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a41      	ldr	r2, [pc, #260]	; (8000a7c <RCC_GetClocksFreq+0x154>)
 8000978:	601a      	str	r2, [r3, #0]
    break;
 800097a:	e039      	b.n	80009f0 <RCC_GetClocksFreq+0xc8>
  case 0x08:  /* PLL P used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800097c:	4b3d      	ldr	r3, [pc, #244]	; (8000a74 <RCC_GetClocksFreq+0x14c>)
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	0d9b      	lsrs	r3, r3, #22
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000988:	4b3a      	ldr	r3, [pc, #232]	; (8000a74 <RCC_GetClocksFreq+0x14c>)
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000990:	60bb      	str	r3, [r7, #8]

    if (pllsource != 0)
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d00c      	beq.n	80009b2 <RCC_GetClocksFreq+0x8a>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000998:	4a38      	ldr	r2, [pc, #224]	; (8000a7c <RCC_GetClocksFreq+0x154>)
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a0:	4a34      	ldr	r2, [pc, #208]	; (8000a74 <RCC_GetClocksFreq+0x14c>)
 80009a2:	6852      	ldr	r2, [r2, #4]
 80009a4:	0992      	lsrs	r2, r2, #6
 80009a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80009aa:	fb02 f303 	mul.w	r3, r2, r3
 80009ae:	61fb      	str	r3, [r7, #28]
 80009b0:	e00b      	b.n	80009ca <RCC_GetClocksFreq+0xa2>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80009b2:	4a31      	ldr	r2, [pc, #196]	; (8000a78 <RCC_GetClocksFreq+0x150>)
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ba:	4a2e      	ldr	r2, [pc, #184]	; (8000a74 <RCC_GetClocksFreq+0x14c>)
 80009bc:	6852      	ldr	r2, [r2, #4]
 80009be:	0992      	lsrs	r2, r2, #6
 80009c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80009c4:	fb02 f303 	mul.w	r3, r2, r3
 80009c8:	61fb      	str	r3, [r7, #28]
    }

    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80009ca:	4b2a      	ldr	r3, [pc, #168]	; (8000a74 <RCC_GetClocksFreq+0x14c>)
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	0c1b      	lsrs	r3, r3, #16
 80009d0:	f003 0303 	and.w	r3, r3, #3
 80009d4:	3301      	adds	r3, #1
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80009da:	69fa      	ldr	r2, [r7, #28]
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	fbb2 f2f3 	udiv	r2, r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	601a      	str	r2, [r3, #0]
    break;
 80009e6:	e003      	b.n	80009f0 <RCC_GetClocksFreq+0xc8>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a23      	ldr	r2, [pc, #140]	; (8000a78 <RCC_GetClocksFreq+0x150>)
 80009ec:	601a      	str	r2, [r3, #0]
    break;
 80009ee:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80009f0:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <RCC_GetClocksFreq+0x14c>)
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009f8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80009fa:	69bb      	ldr	r3, [r7, #24]
 80009fc:	091b      	lsrs	r3, r3, #4
 80009fe:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000a00:	4a1f      	ldr	r2, [pc, #124]	; (8000a80 <RCC_GetClocksFreq+0x158>)
 8000a02:	69bb      	ldr	r3, [r7, #24]
 8000a04:	4413      	add	r3, r2
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	40da      	lsrs	r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <RCC_GetClocksFreq+0x14c>)
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000a20:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	0a9b      	lsrs	r3, r3, #10
 8000a26:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000a28:	4a15      	ldr	r2, [pc, #84]	; (8000a80 <RCC_GetClocksFreq+0x158>)
 8000a2a:	69bb      	ldr	r3, [r7, #24]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	685a      	ldr	r2, [r3, #4]
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	40da      	lsrs	r2, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <RCC_GetClocksFreq+0x14c>)
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000a48:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	0b5b      	lsrs	r3, r3, #13
 8000a4e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000a50:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <RCC_GetClocksFreq+0x158>)
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	4413      	add	r3, r2
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	685a      	ldr	r2, [r3, #4]
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	40da      	lsrs	r2, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	60da      	str	r2, [r3, #12]
}
 8000a68:	bf00      	nop
 8000a6a:	3724      	adds	r7, #36	; 0x24
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	40023800 	.word	0x40023800
 8000a78:	00f42400 	.word	0x00f42400
 8000a7c:	017d7840 	.word	0x017d7840
 8000a80:	20000014 	.word	0x20000014

08000a84 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a90:	78fb      	ldrb	r3, [r7, #3]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d006      	beq.n	8000aa4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000a96:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a9a:	4909      	ldr	r1, [pc, #36]	; (8000ac0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000aa2:	e006      	b.n	8000ab2 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000aa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	4904      	ldr	r1, [pc, #16]	; (8000ac0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000aae:	4013      	ands	r3, r2
 8000ab0:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	460b      	mov	r3, r1
 8000ace:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ad0:	78fb      	ldrb	r3, [r7, #3]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d006      	beq.n	8000ae4 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <RCC_APB1PeriphClockCmd+0x3c>)
 8000ad8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ada:	4909      	ldr	r1, [pc, #36]	; (8000b00 <RCC_APB1PeriphClockCmd+0x3c>)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000ae2:	e006      	b.n	8000af2 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <RCC_APB1PeriphClockCmd+0x3c>)
 8000ae6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	43db      	mvns	r3, r3
 8000aec:	4904      	ldr	r1, [pc, #16]	; (8000b00 <RCC_APB1PeriphClockCmd+0x3c>)
 8000aee:	4013      	ands	r3, r2
 8000af0:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800

08000b04 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b10:	78fb      	ldrb	r3, [r7, #3]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d006      	beq.n	8000b24 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000b16:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <RCC_APB2PeriphClockCmd+0x3c>)
 8000b18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b1a:	4909      	ldr	r1, [pc, #36]	; (8000b40 <RCC_APB2PeriphClockCmd+0x3c>)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000b22:	e006      	b.n	8000b32 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <RCC_APB2PeriphClockCmd+0x3c>)
 8000b26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	4904      	ldr	r1, [pc, #16]	; (8000b40 <RCC_APB2PeriphClockCmd+0x3c>)
 8000b2e:	4013      	ands	r3, r2
 8000b30:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800

08000b44 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b50:	78fb      	ldrb	r3, [r7, #3]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d006      	beq.n	8000b64 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000b56:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <RCC_APB2PeriphResetCmd+0x3c>)
 8000b58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b5a:	4909      	ldr	r1, [pc, #36]	; (8000b80 <RCC_APB2PeriphResetCmd+0x3c>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8000b62:	e006      	b.n	8000b72 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <RCC_APB2PeriphResetCmd+0x3c>)
 8000b66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	4904      	ldr	r1, [pc, #16]	; (8000b80 <RCC_APB2PeriphResetCmd+0x3c>)
 8000b6e:	4013      	ands	r3, r2
 8000b70:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800

08000b84 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
 8000b92:	2300      	movs	r3, #0
 8000b94:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	8a1b      	ldrh	r3, [r3, #16]
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	88db      	ldrh	r3, [r3, #6]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	899b      	ldrh	r3, [r3, #12]
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bcc:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000bd0:	f023 030c 	bic.w	r3, r3, #12
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	889a      	ldrh	r2, [r3, #4]
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	891b      	ldrh	r3, [r3, #8]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000be6:	4313      	orrs	r3, r2
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	461a      	mov	r2, r3
 8000bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	8a9b      	ldrh	r3, [r3, #20]
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	899b      	ldrh	r3, [r3, #12]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c12:	4313      	orrs	r3, r2
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000c1e:	f107 0308 	add.w	r3, r7, #8
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fe80 	bl	8000928 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a30      	ldr	r2, [pc, #192]	; (8000cec <USART_Init+0x168>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d003      	beq.n	8000c38 <USART_Init+0xb4>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a2f      	ldr	r2, [pc, #188]	; (8000cf0 <USART_Init+0x16c>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d102      	bne.n	8000c3e <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	623b      	str	r3, [r7, #32]
 8000c3c:	e001      	b.n	8000c42 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	899b      	ldrh	r3, [r3, #12]
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	b21b      	sxth	r3, r3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	da0c      	bge.n	8000c68 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000c4e:	6a3a      	ldr	r2, [r7, #32]
 8000c50:	4613      	mov	r3, r2
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	4413      	add	r3, r2
 8000c56:	009a      	lsls	r2, r3, #2
 8000c58:	441a      	add	r2, r3
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c64:	61fb      	str	r3, [r7, #28]
 8000c66:	e00b      	b.n	8000c80 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000c68:	6a3a      	ldr	r2, [r7, #32]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	4413      	add	r3, r2
 8000c70:	009a      	lsls	r2, r3, #2
 8000c72:	441a      	add	r2, r3
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7e:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	4a1c      	ldr	r2, [pc, #112]	; (8000cf4 <USART_Init+0x170>)
 8000c84:	fba2 2303 	umull	r2, r3, r2, r3
 8000c88:	095b      	lsrs	r3, r3, #5
 8000c8a:	011b      	lsls	r3, r3, #4
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c90:	091b      	lsrs	r3, r3, #4
 8000c92:	2264      	movs	r2, #100	; 0x64
 8000c94:	fb02 f303 	mul.w	r3, r2, r3
 8000c98:	69fa      	ldr	r2, [r7, #28]
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	899b      	ldrh	r3, [r3, #12]
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	b21b      	sxth	r3, r3
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	da0c      	bge.n	8000cc4 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	00db      	lsls	r3, r3, #3
 8000cae:	3332      	adds	r3, #50	; 0x32
 8000cb0:	4a10      	ldr	r2, [pc, #64]	; (8000cf4 <USART_Init+0x170>)
 8000cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb6:	095b      	lsrs	r3, r3, #5
 8000cb8:	f003 0307 	and.w	r3, r3, #7
 8000cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8000cc2:	e00b      	b.n	8000cdc <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	011b      	lsls	r3, r3, #4
 8000cc8:	3332      	adds	r3, #50	; 0x32
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <USART_Init+0x170>)
 8000ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd0:	095b      	lsrs	r3, r3, #5
 8000cd2:	f003 030f 	and.w	r3, r3, #15
 8000cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	811a      	strh	r2, [r3, #8]
}
 8000ce4:	bf00      	nop
 8000ce6:	3728      	adds	r7, #40	; 0x28
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40011000 	.word	0x40011000
 8000cf0:	40011400 	.word	0x40011400
 8000cf4:	51eb851f 	.word	0x51eb851f

08000cf8 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	460b      	mov	r3, r1
 8000d02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d04:	78fb      	ldrb	r3, [r7, #3]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d008      	beq.n	8000d1c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	899b      	ldrh	r3, [r3, #12]
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000d1a:	e007      	b.n	8000d2c <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	899b      	ldrh	r3, [r3, #12]
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	819a      	strh	r2, [r3, #12]
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000d44:	887b      	ldrh	r3, [r7, #2]
 8000d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	809a      	strh	r2, [r3, #4]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	889b      	ldrh	r3, [r3, #4]
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d6e:	b29b      	uxth	r3, r3
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b087      	sub	sp, #28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000d94:	2300      	movs	r3, #0
 8000d96:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000d98:	887b      	ldrh	r3, [r7, #2]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	095b      	lsrs	r3, r3, #5
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000da2:	887b      	ldrh	r3, [r7, #2]
 8000da4:	f003 031f 	and.w	r3, r3, #31
 8000da8:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000daa:	2201      	movs	r2, #1
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d107      	bne.n	8000dca <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	899b      	ldrh	r3, [r3, #12]
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	e011      	b.n	8000dee <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d107      	bne.n	8000de0 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	8a1b      	ldrh	r3, [r3, #16]
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	e006      	b.n	8000dee <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	8a9b      	ldrh	r3, [r3, #20]
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	461a      	mov	r2, r3
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	4013      	ands	r3, r2
 8000dec:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000dee:	887b      	ldrh	r3, [r7, #2]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000df6:	2201      	movs	r2, #1
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	461a      	mov	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d005      	beq.n	8000e20 <USART_GetITStatus+0xa4>
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d002      	beq.n	8000e20 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	74fb      	strb	r3, [r7, #19]
 8000e1e:	e001      	b.n	8000e24 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000e20:	2300      	movs	r3, #0
 8000e22:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000e24:	7cfb      	ldrb	r3, [r7, #19]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	371c      	adds	r7, #28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b085      	sub	sp, #20
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	81fb      	strh	r3, [r7, #14]
 8000e42:	2300      	movs	r3, #0
 8000e44:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8000e46:	887b      	ldrh	r3, [r7, #2]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8000e4c:	89fb      	ldrh	r3, [r7, #14]
 8000e4e:	2201      	movs	r2, #1
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8000e56:	89bb      	ldrh	r3, [r7, #12]
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	801a      	strh	r2, [r3, #0]
}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	6039      	str	r1, [r7, #0]
 8000e76:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	da0b      	bge.n	8000e98 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	490c      	ldr	r1, [pc, #48]	; (8000eb8 <NVIC_SetPriority+0x4c>)
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	f003 030f 	and.w	r3, r3, #15
 8000e8c:	3b04      	subs	r3, #4
 8000e8e:	0112      	lsls	r2, r2, #4
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	440b      	add	r3, r1
 8000e94:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e96:	e009      	b.n	8000eac <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	4907      	ldr	r1, [pc, #28]	; (8000ebc <NVIC_SetPriority+0x50>)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	0112      	lsls	r2, r2, #4
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00
 8000ebc:	e000e100 	.word	0xe000e100

08000ec0 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed0:	d301      	bcc.n	8000ed6 <SysTick_Config+0x16>
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e00f      	b.n	8000ef6 <SysTick_Config+0x36>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <SysTick_Config+0x40>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ede:	210f      	movs	r1, #15
 8000ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee4:	f7ff ffc2 	bl	8000e6c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <SysTick_Config+0x40>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <SysTick_Config+0x40>)
 8000ef0:	2207      	movs	r2, #7
 8000ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	e000e010 	.word	0xe000e010

08000f04 <TimerInit>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
TimerInit(void) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;

    RCC_GetClocksFreq(&RCC_Clocks);
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fd0b 	bl	8000928 <RCC_GetClocksFreq>
    SysTick_Config(RCC_Clocks.SYSCLK_Frequency/1000);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <TimerInit+0x3c>)
 8000f16:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1a:	099b      	lsrs	r3, r3, #6
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ffcf 	bl	8000ec0 <SysTick_Config>
    NVIC_SetPriority(SysTick_IRQn, 1);
 8000f22:	2101      	movs	r1, #1
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f7ff ffa0 	bl	8000e6c <NVIC_SetPriority>
    memsetl((uint8_t *)g_pTimerHandle, 0, sizeof(g_pTimerHandle));
 8000f2c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000f30:	2100      	movs	r1, #0
 8000f32:	4804      	ldr	r0, [pc, #16]	; (8000f44 <TimerInit+0x40>)
 8000f34:	f000 f8af 	bl	8001096 <memsetl>
    DBG_TIMER_SEND_STR("$ TimerInit\n");
}
 8000f38:	bf00      	nop
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	10624dd3 	.word	0x10624dd3
 8000f44:	20000040 	.word	0x20000040

08000f48 <GetMilSecTick>:
 * @brief  None
 * @param  None
 * @retval None
 */
uint32_t
GetMilSecTick(void) {
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
    return g_wMilSecTickTimer;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <GetMilSecTick+0x14>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	200001c0 	.word	0x200001c0

08000f60 <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <SysTick_Handler+0x18>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	4a03      	ldr	r2, [pc, #12]	; (8000f78 <SysTick_Handler+0x18>)
 8000f6c:	6013      	str	r3, [r2, #0]
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	200001c0 	.word	0x200001c0

08000f7c <USART2_IRQHandler>:
 *   This parameter can be one of the following values:
 *   UART1_IDX, UART2_IDX
 * @retval None
 */
void
USART2_IRQHandler(void) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f82:	b672      	cpsid	i
}
 8000f84:	bf00      	nop
	__disable_irq();
    if (USART_GetITStatus(USART2, USART_IT_RXNE) == SET) {
 8000f86:	f240 5125 	movw	r1, #1317	; 0x525
 8000f8a:	480f      	ldr	r0, [pc, #60]	; (8000fc8 <USART2_IRQHandler+0x4c>)
 8000f8c:	f7ff fef6 	bl	8000d7c <USART_GetITStatus>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d112      	bne.n	8000fbc <USART2_IRQHandler+0x40>
        buffqueue_p pUartBuffQueueRx = (buffqueue_p) g_pUartQueueRx[0];
 8000f96:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <USART2_IRQHandler+0x50>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	607b      	str	r3, [r7, #4]
        uint8_t byReceiverData = USART_ReceiveData(USART2);
 8000f9c:	480a      	ldr	r0, [pc, #40]	; (8000fc8 <USART2_IRQHandler+0x4c>)
 8000f9e:	f7ff fedd 	bl	8000d5c <USART_ReceiveData>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	70fb      	strb	r3, [r7, #3]
        if (bufEnDat(pUartBuffQueueRx, &byReceiverData) == ERR_BUF_FULL) {}
 8000fa8:	1cfb      	adds	r3, r7, #3
 8000faa:	4619      	mov	r1, r3
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f000 f822 	bl	8000ff6 <bufEnDat>
        USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8000fb2:	f240 5125 	movw	r1, #1317	; 0x525
 8000fb6:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <USART2_IRQHandler+0x4c>)
 8000fb8:	f7ff ff3b 	bl	8000e32 <USART_ClearITPendingBit>
  __ASM volatile ("cpsie i" : : : "memory");
 8000fbc:	b662      	cpsie	i
}
 8000fbe:	bf00      	nop
    }
    __enable_irq();
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40004400 	.word	0x40004400
 8000fcc:	200001c4 	.word	0x200001c4

08000fd0 <bufIsFull>:
 * @return 1 if full; 0 otherwise
 */
uint8_t
bufIsFull(
    buffqueue_p pQueue
) {
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    return (pQueue->wCountEle >= pQueue->wSize);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	885a      	ldrh	r2, [r3, #2]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	bf2c      	ite	cs
 8000fe4:	2301      	movcs	r3, #1
 8000fe6:	2300      	movcc	r3, #0
 8000fe8:	b2db      	uxtb	r3, r3
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <bufEnDat>:
 */
uint8_t
bufEnDat(
    buffqueue_p pQueue,
	uint8_t *pReceiverData
) {
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b084      	sub	sp, #16
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001000:	b672      	cpsid	i
}
 8001002:	bf00      	nop
	__disable_irq();
    
    /* Place data in buffer */
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8001004:	2300      	movs	r3, #0
 8001006:	73fb      	strb	r3, [r7, #15]
 8001008:	e021      	b.n	800104e <bufEnDat+0x58>
        pQueue->pData[pQueue->wHeadIndex] = pReceiverData[i];
 800100a:	7bfb      	ldrb	r3, [r7, #15]
 800100c:	683a      	ldr	r2, [r7, #0]
 800100e:	441a      	add	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	6879      	ldr	r1, [r7, #4]
 8001016:	88c9      	ldrh	r1, [r1, #6]
 8001018:	440b      	add	r3, r1
 800101a:	7812      	ldrb	r2, [r2, #0]
 800101c:	701a      	strb	r2, [r3, #0]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1)  & (pQueue->wSize - 1));
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	88db      	ldrh	r3, [r3, #6]
 8001022:	3301      	adds	r3, #1
 8001024:	b29b      	uxth	r3, r3
 8001026:	b21a      	sxth	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	3b01      	subs	r3, #1
 800102e:	b29b      	uxth	r3, r3
 8001030:	b21b      	sxth	r3, r3
 8001032:	4013      	ands	r3, r2
 8001034:	b21b      	sxth	r3, r3
 8001036:	b29a      	uxth	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	80da      	strh	r2, [r3, #6]
        pQueue->wCountEle++;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	885b      	ldrh	r3, [r3, #2]
 8001040:	3301      	adds	r3, #1
 8001042:	b29a      	uxth	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	3301      	adds	r3, #1
 800104c:	73fb      	strb	r3, [r7, #15]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	791b      	ldrb	r3, [r3, #4]
 8001052:	7bfa      	ldrb	r2, [r7, #15]
 8001054:	429a      	cmp	r2, r3
 8001056:	d3d8      	bcc.n	800100a <bufEnDat+0x14>
    }
    
    if (bufIsFull(pQueue)) {
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ffb9 	bl	8000fd0 <bufIsFull>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d011      	beq.n	8001088 <bufEnDat+0x92>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wTailIndex = (pQueue->wTailIndex + pQueue->byItemSize) & (pQueue->wSize - 1);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	891a      	ldrh	r2, [r3, #8]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	791b      	ldrb	r3, [r3, #4]
 800106c:	b29b      	uxth	r3, r3
 800106e:	4413      	add	r3, r2
 8001070:	b29b      	uxth	r3, r3
 8001072:	b21a      	sxth	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	3b01      	subs	r3, #1
 800107a:	b29b      	uxth	r3, r3
 800107c:	b21b      	sxth	r3, r3
 800107e:	4013      	ands	r3, r2
 8001080:	b21b      	sxth	r3, r3
 8001082:	b29a      	uxth	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	811a      	strh	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8001088:	b662      	cpsie	i
}
 800108a:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <memsetl>:
void
memsetl(
	uint8_t *dst,
	uint8_t value,
	uint16_t size
) {
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	460b      	mov	r3, r1
 80010a0:	70fb      	strb	r3, [r7, #3]
 80010a2:	4613      	mov	r3, r2
 80010a4:	803b      	strh	r3, [r7, #0]
    while (size--) {
 80010a6:	e004      	b.n	80010b2 <memsetl+0x1c>
        *dst++ = value;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	78fa      	ldrb	r2, [r7, #3]
 80010b0:	701a      	strb	r2, [r3, #0]
    while (size--) {
 80010b2:	883b      	ldrh	r3, [r7, #0]
 80010b4:	1e5a      	subs	r2, r3, #1
 80010b6:	803a      	strh	r2, [r7, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1f5      	bne.n	80010a8 <memsetl+0x12>
    }    
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <main>:
static void multiSensorScan(void);

/******************************************************************************/

int main(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	SystemCoreClockUpdate();
 80010d0:	f7ff f8b6 	bl	8000240 <SystemCoreClockUpdate>
	TimerInit();
 80010d4:	f7ff ff16 	bl	8000f04 <TimerInit>
	ADC1_Init();
 80010d8:	f000 f812 	bl	8001100 <ADC1_Init>
	USART2_Init();
 80010dc:	f000 f8be 	bl	800125c <USART2_Init>
	dwTime_Initial = GetMilSecTick();
 80010e0:	f7ff ff32 	bl	8000f48 <GetMilSecTick>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <main+0x2c>)
 80010e8:	6013      	str	r3, [r2, #0]
	ADC_SoftwareStartConv(ADC1);
 80010ea:	4804      	ldr	r0, [pc, #16]	; (80010fc <main+0x30>)
 80010ec:	f7ff fb0c 	bl	8000708 <ADC_SoftwareStartConv>
	while(1)
	{
		multiSensorScan();
 80010f0:	f000 f8f4 	bl	80012dc <multiSensorScan>
 80010f4:	e7fc      	b.n	80010f0 <main+0x24>
 80010f6:	bf00      	nop
 80010f8:	200001d0 	.word	0x200001d0
 80010fc:	40012000 	.word	0x40012000

08001100 <ADC1_Init>:
	}
}
static void ADC1_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08c      	sub	sp, #48	; 0x30
 8001104:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef 		GPIO_InitStructure;
	ADC_InitTypeDef			ADC_InitStructure;
	ADC_CommonInitTypeDef	ADC_CommnonInitStructure;

	//
	RCC_APB2PeriphClockCmd(ADCx_CLK,ENABLE);
 8001106:	2101      	movs	r1, #1
 8001108:	f44f 7080 	mov.w	r0, #256	; 0x100
 800110c:	f7ff fcfa 	bl	8000b04 <RCC_APB2PeriphClockCmd>


	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001110:	2101      	movs	r1, #1
 8001112:	2001      	movs	r0, #1
 8001114:	f7ff fcb6 	bl	8000a84 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8001118:	2303      	movs	r3, #3
 800111a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	GPIO_InitStructure.GPIO_Pin = ADC_GPIO_PIN;
 800111e:	2301      	movs	r3, #1
 8001120:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	GPIO_Init(ADC_GPIO_PORT,&GPIO_InitStructure);
 8001128:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800112c:	4619      	mov	r1, r3
 800112e:	481b      	ldr	r0, [pc, #108]	; (800119c <ADC1_Init+0x9c>)
 8001130:	f7ff fb21 	bl	8000776 <GPIO_Init>
	//
	ADC_DeInit();
 8001134:	f7ff f958 	bl	80003e8 <ADC_DeInit>
	//
	ADC_CommnonInitStructure.ADC_Mode = ADC_Mode_Independent;
 8001138:	2300      	movs	r3, #0
 800113a:	603b      	str	r3, [r7, #0]
	ADC_CommnonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
 800113c:	2300      	movs	r3, #0
 800113e:	607b      	str	r3, [r7, #4]
	ADC_CommnonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8001140:	2300      	movs	r3, #0
 8001142:	60bb      	str	r3, [r7, #8]
	ADC_CommnonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
	ADC_CommonInit(&ADC_CommnonInitStructure);
 8001148:	463b      	mov	r3, r7
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f9b0 	bl	80004b0 <ADC_CommonInit>

	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	753b      	strb	r3, [r7, #20]
	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 8001158:	2301      	movs	r3, #1
 800115a:	757b      	strb	r3, [r7, #21]
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800115c:	2300      	movs	r3, #0
 800115e:	61bb      	str	r3, [r7, #24]
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8001164:	2300      	movs	r3, #0
 8001166:	623b      	str	r3, [r7, #32]
	ADC_InitStructure.ADC_NbrOfConversion = 1;
 8001168:	2301      	movs	r3, #1
 800116a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	ADC_Init(ADC1,&ADC_InitStructure);
 800116e:	f107 0310 	add.w	r3, r7, #16
 8001172:	4619      	mov	r1, r3
 8001174:	480a      	ldr	r0, [pc, #40]	; (80011a0 <ADC1_Init+0xa0>)
 8001176:	f7ff f945 	bl	8000404 <ADC_Init>

	ADC_RegularChannelConfig(ADC1, ADC_Channel_TempSensor, 1, ADC_SampleTime_144Cycles);
 800117a:	2306      	movs	r3, #6
 800117c:	2201      	movs	r2, #1
 800117e:	2112      	movs	r1, #18
 8001180:	4807      	ldr	r0, [pc, #28]	; (80011a0 <ADC1_Init+0xa0>)
 8001182:	f7ff f9f7 	bl	8000574 <ADC_RegularChannelConfig>

	ADC_TempSensorVrefintCmd(ENABLE);
 8001186:	2001      	movs	r0, #1
 8001188:	f7ff f9d6 	bl	8000538 <ADC_TempSensorVrefintCmd>
	ADC_Cmd(ADC1,ENABLE);
 800118c:	2101      	movs	r1, #1
 800118e:	4804      	ldr	r0, [pc, #16]	; (80011a0 <ADC1_Init+0xa0>)
 8001190:	f7ff f9b6 	bl	8000500 <ADC_Cmd>

}
 8001194:	bf00      	nop
 8001196:	3730      	adds	r7, #48	; 0x30
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40020000 	.word	0x40020000
 80011a0:	40012000 	.word	0x40012000

080011a4 <Cover_Temperature>:

static void Cover_Temperature(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
	float_t TemperatureValueLast,TemperatureValue;

	while(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == RESET);
 80011aa:	bf00      	nop
 80011ac:	2102      	movs	r1, #2
 80011ae:	4824      	ldr	r0, [pc, #144]	; (8001240 <Cover_Temperature+0x9c>)
 80011b0:	f7ff fac7 	bl	8000742 <ADC_GetFlagStatus>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d0f8      	beq.n	80011ac <Cover_Temperature+0x8>

	TemperatureValue = ADC_GetConversionValue(ADC1);
 80011ba:	4821      	ldr	r0, [pc, #132]	; (8001240 <Cover_Temperature+0x9c>)
 80011bc:	f7ff fab4 	bl	8000728 <ADC_GetConversionValue>
 80011c0:	4603      	mov	r3, r0
 80011c2:	ee07 3a90 	vmov	s15, r3
 80011c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011ca:	edc7 7a01 	vstr	s15, [r7, #4]

	TemperatureValue *= 3300;
 80011ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80011d2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001244 <Cover_Temperature+0xa0>
 80011d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011da:	edc7 7a01 	vstr	s15, [r7, #4]

	TemperatureValue /= 4096;
 80011de:	ed97 7a01 	vldr	s14, [r7, #4]
 80011e2:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001248 <Cover_Temperature+0xa4>
 80011e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ea:	edc7 7a01 	vstr	s15, [r7, #4]

	TemperatureValue /= (float_t)1000.0;
 80011ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80011f2:	eddf 6a16 	vldr	s13, [pc, #88]	; 800124c <Cover_Temperature+0xa8>
 80011f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011fa:	edc7 7a01 	vstr	s15, [r7, #4]

	TemperatureValue -= (float_t)0.76;
 80011fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001202:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001250 <Cover_Temperature+0xac>
 8001206:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800120a:	edc7 7a01 	vstr	s15, [r7, #4]

	TemperatureValue = (float_t)0.0025;
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <Cover_Temperature+0xb0>)
 8001210:	607b      	str	r3, [r7, #4]

	TemperatureValueLast = TemperatureValue + (float_t)25.0;
 8001212:	edd7 7a01 	vldr	s15, [r7, #4]
 8001216:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800121a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800121e:	edc7 7a00 	vstr	s15, [r7]

	USART_SendData(USART2,TemperatureValueLast);
 8001222:	edd7 7a00 	vldr	s15, [r7]
 8001226:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800122a:	ee17 3a90 	vmov	r3, s15
 800122e:	b29b      	uxth	r3, r3
 8001230:	4619      	mov	r1, r3
 8001232:	4809      	ldr	r0, [pc, #36]	; (8001258 <Cover_Temperature+0xb4>)
 8001234:	f7ff fd80 	bl	8000d38 <USART_SendData>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40012000 	.word	0x40012000
 8001244:	454e4000 	.word	0x454e4000
 8001248:	45800000 	.word	0x45800000
 800124c:	447a0000 	.word	0x447a0000
 8001250:	3f428f5c 	.word	0x3f428f5c
 8001254:	3b23d70a 	.word	0x3b23d70a
 8001258:	40004400 	.word	0x40004400

0800125c <USART2_Init>:

static void USART2_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;

    //Enable GPIO clock --------------------------------------------------------
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 8001262:	2101      	movs	r1, #1
 8001264:	2001      	movs	r0, #1
 8001266:	f7ff fc0d 	bl	8000a84 <RCC_AHB1PeriphClockCmd>

    //Configure USART Tx as alternate function push-pull------------------------
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800126a:	2302      	movs	r3, #2
 800126c:	753b      	strb	r3, [r7, #20]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800126e:	2303      	movs	r3, #3
 8001270:	757b      	strb	r3, [r7, #21]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001272:	2300      	movs	r3, #0
 8001274:	75bb      	strb	r3, [r7, #22]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001276:	2301      	movs	r3, #1
 8001278:	75fb      	strb	r3, [r7, #23]

    //Connect USART pins--------------------------------------------------------
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 800127a:	2207      	movs	r2, #7
 800127c:	2102      	movs	r1, #2
 800127e:	4815      	ldr	r0, [pc, #84]	; (80012d4 <USART2_Init+0x78>)
 8001280:	f7ff fb08 	bl	8000894 <GPIO_PinAFConfig>

    GPIO_InitStructure.GPIO_Pin = USART2_TX;
 8001284:	2304      	movs	r3, #4
 8001286:	613b      	str	r3, [r7, #16]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	4619      	mov	r1, r3
 800128e:	4811      	ldr	r0, [pc, #68]	; (80012d4 <USART2_Init+0x78>)
 8001290:	f7ff fa71 	bl	8000776 <GPIO_Init>

	//Enable USART clock--------------------------------------------------------
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
 8001294:	2101      	movs	r1, #1
 8001296:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800129a:	f7ff fc13 	bl	8000ac4 <RCC_APB1PeriphClockCmd>

    USART_InitStructure.USART_BaudRate = 57600;
 800129e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80012a2:	603b      	str	r3, [r7, #0]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80012a4:	2300      	movs	r3, #0
 80012a6:	80bb      	strh	r3, [r7, #4]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	80fb      	strh	r3, [r7, #6]
    USART_InitStructure.USART_Parity = USART_Parity_No;
 80012ac:	2300      	movs	r3, #0
 80012ae:	813b      	strh	r3, [r7, #8]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80012b0:	2300      	movs	r3, #0
 80012b2:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_Mode = USART_Mode_Tx;
 80012b4:	2308      	movs	r3, #8
 80012b6:	817b      	strh	r3, [r7, #10]

    USART_Init(USART2, &USART_InitStructure);
 80012b8:	463b      	mov	r3, r7
 80012ba:	4619      	mov	r1, r3
 80012bc:	4806      	ldr	r0, [pc, #24]	; (80012d8 <USART2_Init+0x7c>)
 80012be:	f7ff fc61 	bl	8000b84 <USART_Init>

	//Enable USART--------------------------------------------------------------
    USART_Cmd(USART2, ENABLE);
 80012c2:	2101      	movs	r1, #1
 80012c4:	4804      	ldr	r0, [pc, #16]	; (80012d8 <USART2_Init+0x7c>)
 80012c6:	f7ff fd17 	bl	8000cf8 <USART_Cmd>
}
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40020000 	.word	0x40020000
 80012d8:	40004400 	.word	0x40004400

080012dc <multiSensorScan>:

static
void multiSensorScan(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	dwTime_Current = GetMilSecTick();
 80012e0:	f7ff fe32 	bl	8000f48 <GetMilSecTick>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4a17      	ldr	r2, [pc, #92]	; (8001344 <multiSensorScan+0x68>)
 80012e8:	6013      	str	r3, [r2, #0]
	if(dwTime_Current >= dwTime_Initial)
 80012ea:	4b16      	ldr	r3, [pc, #88]	; (8001344 <multiSensorScan+0x68>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	4b16      	ldr	r3, [pc, #88]	; (8001348 <multiSensorScan+0x6c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d30a      	bcc.n	800130c <multiSensorScan+0x30>
	{
		dwTime_Total += dwTime_Current - dwTime_Initial;
 80012f6:	4b13      	ldr	r3, [pc, #76]	; (8001344 <multiSensorScan+0x68>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	4b13      	ldr	r3, [pc, #76]	; (8001348 <multiSensorScan+0x6c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	1ad2      	subs	r2, r2, r3
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <multiSensorScan+0x70>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4413      	add	r3, r2
 8001306:	4a11      	ldr	r2, [pc, #68]	; (800134c <multiSensorScan+0x70>)
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e00a      	b.n	8001322 <multiSensorScan+0x46>
	}
	else
	{
		dwTime_Total += 0xFFFFFFFFU - dwTime_Current + dwTime_Initial;
 800130c:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <multiSensorScan+0x6c>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <multiSensorScan+0x68>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	1ad2      	subs	r2, r2, r3
 8001316:	4b0d      	ldr	r3, [pc, #52]	; (800134c <multiSensorScan+0x70>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4413      	add	r3, r2
 800131c:	3b01      	subs	r3, #1
 800131e:	4a0b      	ldr	r2, [pc, #44]	; (800134c <multiSensorScan+0x70>)
 8001320:	6013      	str	r3, [r2, #0]
	}
	if(dwTime_Total >= 2000)
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <multiSensorScan+0x70>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800132a:	d304      	bcc.n	8001336 <multiSensorScan+0x5a>
	{
		dwTime_Total = 0;
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <multiSensorScan+0x70>)
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
		Cover_Temperature();
 8001332:	f7ff ff37 	bl	80011a4 <Cover_Temperature>
	}
	dwTime_Initial = dwTime_Current;
 8001336:	4b03      	ldr	r3, [pc, #12]	; (8001344 <multiSensorScan+0x68>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a03      	ldr	r2, [pc, #12]	; (8001348 <multiSensorScan+0x6c>)
 800133c:	6013      	str	r3, [r2, #0]
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200001cc 	.word	0x200001cc
 8001348:	200001d0 	.word	0x200001d0
 800134c:	200001d4 	.word	0x200001d4

08001350 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001350:	480d      	ldr	r0, [pc, #52]	; (8001388 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001352:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001354:	f7fe ff3e 	bl	80001d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001358:	480c      	ldr	r0, [pc, #48]	; (800138c <LoopForever+0x6>)
  ldr r1, =_edata
 800135a:	490d      	ldr	r1, [pc, #52]	; (8001390 <LoopForever+0xa>)
  ldr r2, =_sidata
 800135c:	4a0d      	ldr	r2, [pc, #52]	; (8001394 <LoopForever+0xe>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001360:	e002      	b.n	8001368 <LoopCopyDataInit>

08001362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001366:	3304      	adds	r3, #4

08001368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800136c:	d3f9      	bcc.n	8001362 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001370:	4c0a      	ldr	r4, [pc, #40]	; (800139c <LoopForever+0x16>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001374:	e001      	b.n	800137a <LoopFillZerobss>

08001376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001378:	3204      	adds	r2, #4

0800137a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800137c:	d3fb      	bcc.n	8001376 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800137e:	f000 f811 	bl	80013a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001382:	f7ff fea3 	bl	80010cc <main>

08001386 <LoopForever>:

LoopForever:
    b LoopForever
 8001386:	e7fe      	b.n	8001386 <LoopForever>
  ldr   r0, =_estack
 8001388:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800138c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001390:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001394:	0800140c 	.word	0x0800140c
  ldr r2, =_sbss
 8001398:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 800139c:	200001d8 	.word	0x200001d8

080013a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013a0:	e7fe      	b.n	80013a0 <ADC_IRQHandler>
	...

080013a4 <__libc_init_array>:
 80013a4:	b570      	push	{r4, r5, r6, lr}
 80013a6:	4d0d      	ldr	r5, [pc, #52]	; (80013dc <__libc_init_array+0x38>)
 80013a8:	4c0d      	ldr	r4, [pc, #52]	; (80013e0 <__libc_init_array+0x3c>)
 80013aa:	1b64      	subs	r4, r4, r5
 80013ac:	10a4      	asrs	r4, r4, #2
 80013ae:	2600      	movs	r6, #0
 80013b0:	42a6      	cmp	r6, r4
 80013b2:	d109      	bne.n	80013c8 <__libc_init_array+0x24>
 80013b4:	4d0b      	ldr	r5, [pc, #44]	; (80013e4 <__libc_init_array+0x40>)
 80013b6:	4c0c      	ldr	r4, [pc, #48]	; (80013e8 <__libc_init_array+0x44>)
 80013b8:	f000 f818 	bl	80013ec <_init>
 80013bc:	1b64      	subs	r4, r4, r5
 80013be:	10a4      	asrs	r4, r4, #2
 80013c0:	2600      	movs	r6, #0
 80013c2:	42a6      	cmp	r6, r4
 80013c4:	d105      	bne.n	80013d2 <__libc_init_array+0x2e>
 80013c6:	bd70      	pop	{r4, r5, r6, pc}
 80013c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80013cc:	4798      	blx	r3
 80013ce:	3601      	adds	r6, #1
 80013d0:	e7ee      	b.n	80013b0 <__libc_init_array+0xc>
 80013d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80013d6:	4798      	blx	r3
 80013d8:	3601      	adds	r6, #1
 80013da:	e7f2      	b.n	80013c2 <__libc_init_array+0x1e>
 80013dc:	08001404 	.word	0x08001404
 80013e0:	08001404 	.word	0x08001404
 80013e4:	08001404 	.word	0x08001404
 80013e8:	08001408 	.word	0x08001408

080013ec <_init>:
 80013ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ee:	bf00      	nop
 80013f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013f2:	bc08      	pop	{r3}
 80013f4:	469e      	mov	lr, r3
 80013f6:	4770      	bx	lr

080013f8 <_fini>:
 80013f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013fa:	bf00      	nop
 80013fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013fe:	bc08      	pop	{r3}
 8001400:	469e      	mov	lr, r3
 8001402:	4770      	bx	lr
