
Bai1_Lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000099c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b30  08000b30  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b30  08000b30  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08000b30  08000b30  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b30  08000b30  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b30  08000b30  00010b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b34  08000b34  00010b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08000b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000014  08000b4c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08000b4c  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006231  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001179  00000000  00000000  00026275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f8  00000000  00000000  000273f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000760  00000000  00000000  00027be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000bd4a  00000000  00000000  00028348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000596f  00000000  00000000  00034092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004381b  00000000  00000000  00039a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007d21c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022b4  00000000  00000000  0007d270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000b18 	.word	0x08000b18

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08000b18 	.word	0x08000b18

080001d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d8:	4b16      	ldr	r3, [pc, #88]	; (8000234 <SystemInit+0x60>)
 80001da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001de:	4a15      	ldr	r2, [pc, #84]	; (8000234 <SystemInit+0x60>)
 80001e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001e8:	4b13      	ldr	r3, [pc, #76]	; (8000238 <SystemInit+0x64>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a12      	ldr	r2, [pc, #72]	; (8000238 <SystemInit+0x64>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001f4:	4b10      	ldr	r3, [pc, #64]	; (8000238 <SystemInit+0x64>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001fa:	4b0f      	ldr	r3, [pc, #60]	; (8000238 <SystemInit+0x64>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a0e      	ldr	r2, [pc, #56]	; (8000238 <SystemInit+0x64>)
 8000200:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000208:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800020a:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <SystemInit+0x64>)
 800020c:	4a0b      	ldr	r2, [pc, #44]	; (800023c <SystemInit+0x68>)
 800020e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000210:	4b09      	ldr	r3, [pc, #36]	; (8000238 <SystemInit+0x64>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a08      	ldr	r2, [pc, #32]	; (8000238 <SystemInit+0x64>)
 8000216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800021a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <SystemInit+0x64>)
 800021e:	2200      	movs	r2, #0
 8000220:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000222:	f000 f88f 	bl	8000344 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <SystemInit+0x60>)
 8000228:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800022c:	609a      	str	r2, [r3, #8]
#endif
}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	e000ed00 	.word	0xe000ed00
 8000238:	40023800 	.word	0x40023800
 800023c:	24003010 	.word	0x24003010

08000240 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000240:	b480      	push	{r7}
 8000242:	b087      	sub	sp, #28
 8000244:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000246:	2300      	movs	r3, #0
 8000248:	613b      	str	r3, [r7, #16]
 800024a:	2300      	movs	r3, #0
 800024c:	617b      	str	r3, [r7, #20]
 800024e:	2302      	movs	r3, #2
 8000250:	60fb      	str	r3, [r7, #12]
 8000252:	2300      	movs	r3, #0
 8000254:	60bb      	str	r3, [r7, #8]
 8000256:	2302      	movs	r3, #2
 8000258:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800025a:	4b35      	ldr	r3, [pc, #212]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 800025c:	689b      	ldr	r3, [r3, #8]
 800025e:	f003 030c 	and.w	r3, r3, #12
 8000262:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000264:	693b      	ldr	r3, [r7, #16]
 8000266:	2b08      	cmp	r3, #8
 8000268:	d011      	beq.n	800028e <SystemCoreClockUpdate+0x4e>
 800026a:	693b      	ldr	r3, [r7, #16]
 800026c:	2b08      	cmp	r3, #8
 800026e:	d844      	bhi.n	80002fa <SystemCoreClockUpdate+0xba>
 8000270:	693b      	ldr	r3, [r7, #16]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d003      	beq.n	800027e <SystemCoreClockUpdate+0x3e>
 8000276:	693b      	ldr	r3, [r7, #16]
 8000278:	2b04      	cmp	r3, #4
 800027a:	d004      	beq.n	8000286 <SystemCoreClockUpdate+0x46>
 800027c:	e03d      	b.n	80002fa <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800027e:	4b2d      	ldr	r3, [pc, #180]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000280:	4a2d      	ldr	r2, [pc, #180]	; (8000338 <SystemCoreClockUpdate+0xf8>)
 8000282:	601a      	str	r2, [r3, #0]
      break;
 8000284:	e03d      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000286:	4b2b      	ldr	r3, [pc, #172]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000288:	4a2c      	ldr	r2, [pc, #176]	; (800033c <SystemCoreClockUpdate+0xfc>)
 800028a:	601a      	str	r2, [r3, #0]
      break;
 800028c:	e039      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800028e:	4b28      	ldr	r3, [pc, #160]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	0d9b      	lsrs	r3, r3, #22
 8000294:	f003 0301 	and.w	r3, r3, #1
 8000298:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800029a:	4b25      	ldr	r3, [pc, #148]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002a2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d00c      	beq.n	80002c4 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002aa:	4a24      	ldr	r2, [pc, #144]	; (800033c <SystemCoreClockUpdate+0xfc>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80002b2:	4a1f      	ldr	r2, [pc, #124]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 80002b4:	6852      	ldr	r2, [r2, #4]
 80002b6:	0992      	lsrs	r2, r2, #6
 80002b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002bc:	fb02 f303 	mul.w	r3, r2, r3
 80002c0:	617b      	str	r3, [r7, #20]
 80002c2:	e00b      	b.n	80002dc <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002c4:	4a1c      	ldr	r2, [pc, #112]	; (8000338 <SystemCoreClockUpdate+0xf8>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002cc:	4a18      	ldr	r2, [pc, #96]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 80002ce:	6852      	ldr	r2, [r2, #4]
 80002d0:	0992      	lsrs	r2, r2, #6
 80002d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002d6:	fb02 f303 	mul.w	r3, r2, r3
 80002da:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80002dc:	4b14      	ldr	r3, [pc, #80]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	0c1b      	lsrs	r3, r3, #16
 80002e2:	f003 0303 	and.w	r3, r3, #3
 80002e6:	3301      	adds	r3, #1
 80002e8:	005b      	lsls	r3, r3, #1
 80002ea:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002ec:	697a      	ldr	r2, [r7, #20]
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002f4:	4a0f      	ldr	r2, [pc, #60]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 80002f6:	6013      	str	r3, [r2, #0]
      break;
 80002f8:	e003      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 80002fc:	4a0e      	ldr	r2, [pc, #56]	; (8000338 <SystemCoreClockUpdate+0xf8>)
 80002fe:	601a      	str	r2, [r3, #0]
      break;
 8000300:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000302:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	091b      	lsrs	r3, r3, #4
 8000308:	f003 030f 	and.w	r3, r3, #15
 800030c:	4a0c      	ldr	r2, [pc, #48]	; (8000340 <SystemCoreClockUpdate+0x100>)
 800030e:	5cd3      	ldrb	r3, [r2, r3]
 8000310:	b2db      	uxtb	r3, r3
 8000312:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000314:	4b07      	ldr	r3, [pc, #28]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	693b      	ldr	r3, [r7, #16]
 800031a:	fa22 f303 	lsr.w	r3, r2, r3
 800031e:	4a05      	ldr	r2, [pc, #20]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000320:	6013      	str	r3, [r2, #0]
}
 8000322:	bf00      	nop
 8000324:	371c      	adds	r7, #28
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40023800 	.word	0x40023800
 8000334:	20000000 	.word	0x20000000
 8000338:	00f42400 	.word	0x00f42400
 800033c:	017d7840 	.word	0x017d7840
 8000340:	20000004 	.word	0x20000004

08000344 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000348:	4b23      	ldr	r3, [pc, #140]	; (80003d8 <SetSysClock+0x94>)
 800034a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800034c:	4a22      	ldr	r2, [pc, #136]	; (80003d8 <SetSysClock+0x94>)
 800034e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000352:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SetSysClock+0x98>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a20      	ldr	r2, [pc, #128]	; (80003dc <SetSysClock+0x98>)
 800035a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800035e:	6013      	str	r3, [r2, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000360:	4b1d      	ldr	r3, [pc, #116]	; (80003d8 <SetSysClock+0x94>)
 8000362:	4a1d      	ldr	r2, [pc, #116]	; (80003d8 <SetSysClock+0x94>)
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	6093      	str	r3, [r2, #8]

  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000368:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <SetSysClock+0x94>)
 800036a:	4a1b      	ldr	r2, [pc, #108]	; (80003d8 <SetSysClock+0x94>)
 800036c:	689b      	ldr	r3, [r3, #8]
 800036e:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000370:	4b19      	ldr	r3, [pc, #100]	; (80003d8 <SetSysClock+0x94>)
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	4a18      	ldr	r2, [pc, #96]	; (80003d8 <SetSysClock+0x94>)
 8000376:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800037a:	6093      	str	r3, [r2, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800037c:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <SetSysClock+0x94>)
 800037e:	4a18      	ldr	r2, [pc, #96]	; (80003e0 <SetSysClock+0x9c>)
 8000380:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 8000382:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <SetSysClock+0x94>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a14      	ldr	r2, [pc, #80]	; (80003d8 <SetSysClock+0x94>)
 8000388:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800038c:	6013      	str	r3, [r2, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800038e:	bf00      	nop
 8000390:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <SetSysClock+0x94>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000398:	2b00      	cmp	r3, #0
 800039a:	d0f9      	beq.n	8000390 <SetSysClock+0x4c>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SetSysClock+0xa0>)
 800039e:	f240 6202 	movw	r2, #1538	; 0x602
 80003a2:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <SetSysClock+0x94>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	4a0b      	ldr	r2, [pc, #44]	; (80003d8 <SetSysClock+0x94>)
 80003aa:	f023 0303 	bic.w	r3, r3, #3
 80003ae:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 80003b0:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <SetSysClock+0x94>)
 80003b2:	689b      	ldr	r3, [r3, #8]
 80003b4:	4a08      	ldr	r2, [pc, #32]	; (80003d8 <SetSysClock+0x94>)
 80003b6:	f043 0302 	orr.w	r3, r3, #2
 80003ba:	6093      	str	r3, [r2, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80003bc:	bf00      	nop
 80003be:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <SetSysClock+0x94>)
 80003c0:	689b      	ldr	r3, [r3, #8]
 80003c2:	f003 030c 	and.w	r3, r3, #12
 80003c6:	2b08      	cmp	r3, #8
 80003c8:	d1f9      	bne.n	80003be <SetSysClock+0x7a>
}
 80003ca:	bf00      	nop
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40023800 	.word	0x40023800
 80003dc:	40007000 	.word	0x40007000
 80003e0:	08015410 	.word	0x08015410
 80003e4:	40023c00 	.word	0x40023c00

080003e8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b087      	sub	sp, #28
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80003f2:	2300      	movs	r3, #0
 80003f4:	617b      	str	r3, [r7, #20]
 80003f6:	2300      	movs	r3, #0
 80003f8:	613b      	str	r3, [r7, #16]
 80003fa:	2300      	movs	r3, #0
 80003fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003fe:	2300      	movs	r3, #0
 8000400:	617b      	str	r3, [r7, #20]
 8000402:	e076      	b.n	80004f2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000404:	2201      	movs	r2, #1
 8000406:	697b      	ldr	r3, [r7, #20]
 8000408:	fa02 f303 	lsl.w	r3, r2, r3
 800040c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	693a      	ldr	r2, [r7, #16]
 8000414:	4013      	ands	r3, r2
 8000416:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000418:	68fa      	ldr	r2, [r7, #12]
 800041a:	693b      	ldr	r3, [r7, #16]
 800041c:	429a      	cmp	r2, r3
 800041e:	d165      	bne.n	80004ec <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	697b      	ldr	r3, [r7, #20]
 8000426:	005b      	lsls	r3, r3, #1
 8000428:	2103      	movs	r1, #3
 800042a:	fa01 f303 	lsl.w	r3, r1, r3
 800042e:	43db      	mvns	r3, r3
 8000430:	401a      	ands	r2, r3
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	791b      	ldrb	r3, [r3, #4]
 800043e:	4619      	mov	r1, r3
 8000440:	697b      	ldr	r3, [r7, #20]
 8000442:	005b      	lsls	r3, r3, #1
 8000444:	fa01 f303 	lsl.w	r3, r1, r3
 8000448:	431a      	orrs	r2, r3
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	791b      	ldrb	r3, [r3, #4]
 8000452:	2b01      	cmp	r3, #1
 8000454:	d003      	beq.n	800045e <GPIO_Init+0x76>
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	791b      	ldrb	r3, [r3, #4]
 800045a:	2b02      	cmp	r3, #2
 800045c:	d12e      	bne.n	80004bc <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	689a      	ldr	r2, [r3, #8]
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	005b      	lsls	r3, r3, #1
 8000466:	2103      	movs	r1, #3
 8000468:	fa01 f303 	lsl.w	r3, r1, r3
 800046c:	43db      	mvns	r3, r3
 800046e:	401a      	ands	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	689a      	ldr	r2, [r3, #8]
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	795b      	ldrb	r3, [r3, #5]
 800047c:	4619      	mov	r1, r3
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	fa01 f303 	lsl.w	r3, r1, r3
 8000486:	431a      	orrs	r2, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	685a      	ldr	r2, [r3, #4]
 8000490:	697b      	ldr	r3, [r7, #20]
 8000492:	b29b      	uxth	r3, r3
 8000494:	4619      	mov	r1, r3
 8000496:	2301      	movs	r3, #1
 8000498:	408b      	lsls	r3, r1
 800049a:	43db      	mvns	r3, r3
 800049c:	401a      	ands	r2, r3
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	683a      	ldr	r2, [r7, #0]
 80004a8:	7992      	ldrb	r2, [r2, #6]
 80004aa:	4611      	mov	r1, r2
 80004ac:	697a      	ldr	r2, [r7, #20]
 80004ae:	b292      	uxth	r2, r2
 80004b0:	fa01 f202 	lsl.w	r2, r1, r2
 80004b4:	b292      	uxth	r2, r2
 80004b6:	431a      	orrs	r2, r3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	68da      	ldr	r2, [r3, #12]
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	b29b      	uxth	r3, r3
 80004c4:	005b      	lsls	r3, r3, #1
 80004c6:	2103      	movs	r1, #3
 80004c8:	fa01 f303 	lsl.w	r3, r1, r3
 80004cc:	43db      	mvns	r3, r3
 80004ce:	401a      	ands	r2, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	68da      	ldr	r2, [r3, #12]
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	79db      	ldrb	r3, [r3, #7]
 80004dc:	4619      	mov	r1, r3
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	fa01 f303 	lsl.w	r3, r1, r3
 80004e6:	431a      	orrs	r2, r3
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	3301      	adds	r3, #1
 80004f0:	617b      	str	r3, [r7, #20]
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	2b0f      	cmp	r3, #15
 80004f6:	d985      	bls.n	8000404 <GPIO_Init+0x1c>
    }
  }
}
 80004f8:	bf00      	nop
 80004fa:	bf00      	nop
 80004fc:	371c      	adds	r7, #28
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
	...

08000508 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	460b      	mov	r3, r1
 8000512:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000514:	78fb      	ldrb	r3, [r7, #3]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d006      	beq.n	8000528 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800051a:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <RCC_AHB1PeriphClockCmd+0x3c>)
 800051c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800051e:	4909      	ldr	r1, [pc, #36]	; (8000544 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	4313      	orrs	r3, r2
 8000524:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000526:	e006      	b.n	8000536 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <RCC_AHB1PeriphClockCmd+0x3c>)
 800052a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	43db      	mvns	r3, r3
 8000530:	4904      	ldr	r1, [pc, #16]	; (8000544 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000532:	4013      	ands	r3, r2
 8000534:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000536:	bf00      	nop
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	40023800 	.word	0x40023800

08000548 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	460b      	mov	r3, r1
 8000552:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000554:	78fb      	ldrb	r3, [r7, #3]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d006      	beq.n	8000568 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800055a:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <RCC_APB2PeriphClockCmd+0x3c>)
 800055c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800055e:	4909      	ldr	r1, [pc, #36]	; (8000584 <RCC_APB2PeriphClockCmd+0x3c>)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4313      	orrs	r3, r2
 8000564:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000566:	e006      	b.n	8000576 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <RCC_APB2PeriphClockCmd+0x3c>)
 800056a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	43db      	mvns	r3, r3
 8000570:	4904      	ldr	r1, [pc, #16]	; (8000584 <RCC_APB2PeriphClockCmd+0x3c>)
 8000572:	4013      	ands	r3, r2
 8000574:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	40023800 	.word	0x40023800

08000588 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	881b      	ldrh	r3, [r3, #0]
 800059a:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4a29      	ldr	r2, [pc, #164]	; (8000644 <TIM_TimeBaseInit+0xbc>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d013      	beq.n	80005cc <TIM_TimeBaseInit+0x44>
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4a28      	ldr	r2, [pc, #160]	; (8000648 <TIM_TimeBaseInit+0xc0>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d00f      	beq.n	80005cc <TIM_TimeBaseInit+0x44>
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005b2:	d00b      	beq.n	80005cc <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4a25      	ldr	r2, [pc, #148]	; (800064c <TIM_TimeBaseInit+0xc4>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d007      	beq.n	80005cc <TIM_TimeBaseInit+0x44>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4a24      	ldr	r2, [pc, #144]	; (8000650 <TIM_TimeBaseInit+0xc8>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d003      	beq.n	80005cc <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5))
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	4a23      	ldr	r2, [pc, #140]	; (8000654 <TIM_TimeBaseInit+0xcc>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d108      	bne.n	80005de <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80005cc:	89fb      	ldrh	r3, [r7, #14]
 80005ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80005d2:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	885a      	ldrh	r2, [r3, #2]
 80005d8:	89fb      	ldrh	r3, [r7, #14]
 80005da:	4313      	orrs	r3, r2
 80005dc:	81fb      	strh	r3, [r7, #14]
  }

  if((TIMx != TIM6) && (TIMx != TIM7))
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a1d      	ldr	r2, [pc, #116]	; (8000658 <TIM_TimeBaseInit+0xd0>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d00c      	beq.n	8000600 <TIM_TimeBaseInit+0x78>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a1c      	ldr	r2, [pc, #112]	; (800065c <TIM_TimeBaseInit+0xd4>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d008      	beq.n	8000600 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80005ee:	89fb      	ldrh	r3, [r7, #14]
 80005f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80005f4:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	891a      	ldrh	r2, [r3, #8]
 80005fa:	89fb      	ldrh	r3, [r7, #14]
 80005fc:	4313      	orrs	r3, r2
 80005fe:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	89fa      	ldrh	r2, [r7, #14]
 8000604:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	685a      	ldr	r2, [r3, #4]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	881a      	ldrh	r2, [r3, #0]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	851a      	strh	r2, [r3, #40]	; 0x28

  if ((TIMx == TIM1) || (TIMx == TIM8))
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <TIM_TimeBaseInit+0xbc>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d003      	beq.n	8000626 <TIM_TimeBaseInit+0x9e>
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a09      	ldr	r2, [pc, #36]	; (8000648 <TIM_TimeBaseInit+0xc0>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d104      	bne.n	8000630 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	7a9b      	ldrb	r3, [r3, #10]
 800062a:	b29a      	uxth	r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2201      	movs	r2, #1
 8000634:	829a      	strh	r2, [r3, #20]
}
 8000636:	bf00      	nop
 8000638:	3714      	adds	r7, #20
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	40010000 	.word	0x40010000
 8000648:	40010400 	.word	0x40010400
 800064c:	40000400 	.word	0x40000400
 8000650:	40000800 	.word	0x40000800
 8000654:	40000c00 	.word	0x40000c00
 8000658:	40001000 	.word	0x40001000
 800065c:	40001400 	.word	0x40001400

08000660 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	683a      	ldr	r2, [r7, #0]
 800066e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000688:	4618      	mov	r0, r3
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006a0:	78fb      	ldrb	r3, [r7, #3]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d008      	beq.n	80006b8 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80006b6:	e007      	b.n	80006c8 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	b29b      	uxth	r3, r3
 80006be:	f023 0301 	bic.w	r3, r3, #1
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	801a      	strh	r2, [r3, #0]
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	889b      	ldrh	r3, [r3, #4]
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006e6:	b29b      	uxth	r3, r3
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b087      	sub	sp, #28
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	460b      	mov	r3, r1
 80006fe:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
 8000708:	2300      	movs	r3, #0
 800070a:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 800070c:	2300      	movs	r3, #0
 800070e:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000710:	887b      	ldrh	r3, [r7, #2]
 8000712:	b2db      	uxtb	r3, r3
 8000714:	095b      	lsrs	r3, r3, #5
 8000716:	b2db      	uxtb	r3, r3
 8000718:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800071a:	887b      	ldrh	r3, [r7, #2]
 800071c:	f003 031f 	and.w	r3, r3, #31
 8000720:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000722:	2201      	movs	r2, #1
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	fa02 f303 	lsl.w	r3, r2, r3
 800072a:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d107      	bne.n	8000742 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	899b      	ldrh	r3, [r3, #12]
 8000736:	b29b      	uxth	r3, r3
 8000738:	461a      	mov	r2, r3
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	4013      	ands	r3, r2
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	e011      	b.n	8000766 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	2b02      	cmp	r3, #2
 8000746:	d107      	bne.n	8000758 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	8a1b      	ldrh	r3, [r3, #16]
 800074c:	b29b      	uxth	r3, r3
 800074e:	461a      	mov	r2, r3
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	4013      	ands	r3, r2
 8000754:	617b      	str	r3, [r7, #20]
 8000756:	e006      	b.n	8000766 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	8a9b      	ldrh	r3, [r3, #20]
 800075c:	b29b      	uxth	r3, r3
 800075e:	461a      	mov	r2, r3
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	4013      	ands	r3, r2
 8000764:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000766:	887b      	ldrh	r3, [r7, #2]
 8000768:	0a1b      	lsrs	r3, r3, #8
 800076a:	b29b      	uxth	r3, r3
 800076c:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800076e:	2201      	movs	r2, #1
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	fa02 f303 	lsl.w	r3, r2, r3
 8000776:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	b29b      	uxth	r3, r3
 800077e:	461a      	mov	r2, r3
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	4013      	ands	r3, r2
 8000784:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d005      	beq.n	8000798 <USART_GetITStatus+0xa4>
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d002      	beq.n	8000798 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000792:	2301      	movs	r3, #1
 8000794:	74fb      	strb	r3, [r7, #19]
 8000796:	e001      	b.n	800079c <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000798:	2300      	movs	r3, #0
 800079a:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 800079c:	7cfb      	ldrb	r3, [r7, #19]
}
 800079e:	4618      	mov	r0, r3
 80007a0:	371c      	adds	r7, #28
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80007aa:	b480      	push	{r7}
 80007ac:	b085      	sub	sp, #20
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
 80007b2:	460b      	mov	r3, r1
 80007b4:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 80007b6:	2300      	movs	r3, #0
 80007b8:	81fb      	strh	r3, [r7, #14]
 80007ba:	2300      	movs	r3, #0
 80007bc:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 80007be:	887b      	ldrh	r3, [r7, #2]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80007c4:	89fb      	ldrh	r3, [r7, #14]
 80007c6:	2201      	movs	r2, #1
 80007c8:	fa02 f303 	lsl.w	r3, r2, r3
 80007cc:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 80007ce:	89bb      	ldrh	r3, [r7, #12]
 80007d0:	43db      	mvns	r3, r3
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	801a      	strh	r2, [r3, #0]
}
 80007d8:	bf00      	nop
 80007da:	3714      	adds	r7, #20
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 80007e8:	4b04      	ldr	r3, [pc, #16]	; (80007fc <SysTick_Handler+0x18>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	3301      	adds	r3, #1
 80007ee:	4a03      	ldr	r2, [pc, #12]	; (80007fc <SysTick_Handler+0x18>)
 80007f0:	6013      	str	r3, [r2, #0]
}
 80007f2:	bf00      	nop
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	20000030 	.word	0x20000030

08000800 <USART2_IRQHandler>:
 *   This parameter can be one of the following values:
 *   UART1_IDX, UART2_IDX
 * @retval None
 */
void
USART2_IRQHandler(void) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000806:	b672      	cpsid	i
}
 8000808:	bf00      	nop
	__disable_irq();
    if (USART_GetITStatus(USART2, USART_IT_RXNE) == SET) {
 800080a:	f240 5125 	movw	r1, #1317	; 0x525
 800080e:	480f      	ldr	r0, [pc, #60]	; (800084c <USART2_IRQHandler+0x4c>)
 8000810:	f7ff ff70 	bl	80006f4 <USART_GetITStatus>
 8000814:	4603      	mov	r3, r0
 8000816:	2b01      	cmp	r3, #1
 8000818:	d112      	bne.n	8000840 <USART2_IRQHandler+0x40>
        buffqueue_p pUartBuffQueueRx = (buffqueue_p) g_pUartQueueRx[0];
 800081a:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <USART2_IRQHandler+0x50>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	607b      	str	r3, [r7, #4]
        uint8_t byReceiverData = USART_ReceiveData(USART2);
 8000820:	480a      	ldr	r0, [pc, #40]	; (800084c <USART2_IRQHandler+0x4c>)
 8000822:	f7ff ff57 	bl	80006d4 <USART_ReceiveData>
 8000826:	4603      	mov	r3, r0
 8000828:	b2db      	uxtb	r3, r3
 800082a:	70fb      	strb	r3, [r7, #3]
        if (bufEnDat(pUartBuffQueueRx, &byReceiverData) == ERR_BUF_FULL) {}
 800082c:	1cfb      	adds	r3, r7, #3
 800082e:	4619      	mov	r1, r3
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f000 f822 	bl	800087a <bufEnDat>
        USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8000836:	f240 5125 	movw	r1, #1317	; 0x525
 800083a:	4804      	ldr	r0, [pc, #16]	; (800084c <USART2_IRQHandler+0x4c>)
 800083c:	f7ff ffb5 	bl	80007aa <USART_ClearITPendingBit>
  __ASM volatile ("cpsie i" : : : "memory");
 8000840:	b662      	cpsie	i
}
 8000842:	bf00      	nop
    }
    __enable_irq();
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40004400 	.word	0x40004400
 8000850:	20000034 	.word	0x20000034

08000854 <bufIsFull>:
 * @return 1 if full; 0 otherwise
 */
uint8_t
bufIsFull(
    buffqueue_p pQueue
) {
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
    return (pQueue->wCountEle >= pQueue->wSize);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	885a      	ldrh	r2, [r3, #2]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	429a      	cmp	r2, r3
 8000866:	bf2c      	ite	cs
 8000868:	2301      	movcs	r3, #1
 800086a:	2300      	movcc	r3, #0
 800086c:	b2db      	uxtb	r3, r3
}
 800086e:	4618      	mov	r0, r3
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr

0800087a <bufEnDat>:
 */
uint8_t
bufEnDat(
    buffqueue_p pQueue,
	uint8_t *pReceiverData
) {
 800087a:	b580      	push	{r7, lr}
 800087c:	b084      	sub	sp, #16
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
 8000882:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000884:	b672      	cpsid	i
}
 8000886:	bf00      	nop
	__disable_irq();
    
    /* Place data in buffer */
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8000888:	2300      	movs	r3, #0
 800088a:	73fb      	strb	r3, [r7, #15]
 800088c:	e021      	b.n	80008d2 <bufEnDat+0x58>
        pQueue->pData[pQueue->wHeadIndex] = pReceiverData[i];
 800088e:	7bfb      	ldrb	r3, [r7, #15]
 8000890:	683a      	ldr	r2, [r7, #0]
 8000892:	441a      	add	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	6879      	ldr	r1, [r7, #4]
 800089a:	88c9      	ldrh	r1, [r1, #6]
 800089c:	440b      	add	r3, r1
 800089e:	7812      	ldrb	r2, [r2, #0]
 80008a0:	701a      	strb	r2, [r3, #0]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1)  & (pQueue->wSize - 1));
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	88db      	ldrh	r3, [r3, #6]
 80008a6:	3301      	adds	r3, #1
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	b21a      	sxth	r2, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	3b01      	subs	r3, #1
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	b21b      	sxth	r3, r3
 80008b6:	4013      	ands	r3, r2
 80008b8:	b21b      	sxth	r3, r3
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	80da      	strh	r2, [r3, #6]
        pQueue->wCountEle++;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	885b      	ldrh	r3, [r3, #2]
 80008c4:	3301      	adds	r3, #1
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 80008cc:	7bfb      	ldrb	r3, [r7, #15]
 80008ce:	3301      	adds	r3, #1
 80008d0:	73fb      	strb	r3, [r7, #15]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	791b      	ldrb	r3, [r3, #4]
 80008d6:	7bfa      	ldrb	r2, [r7, #15]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d3d8      	bcc.n	800088e <bufEnDat+0x14>
    }
    
    if (bufIsFull(pQueue)) {
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ffb9 	bl	8000854 <bufIsFull>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d011      	beq.n	800090c <bufEnDat+0x92>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wTailIndex = (pQueue->wTailIndex + pQueue->byItemSize) & (pQueue->wSize - 1);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	891a      	ldrh	r2, [r3, #8]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	791b      	ldrb	r3, [r3, #4]
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	4413      	add	r3, r2
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	b21a      	sxth	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	3b01      	subs	r3, #1
 80008fe:	b29b      	uxth	r3, r3
 8000900:	b21b      	sxth	r3, r3
 8000902:	4013      	ands	r3, r2
 8000904:	b21b      	sxth	r3, r3
 8000906:	b29a      	uxth	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	811a      	strh	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800090c:	b662      	cpsie	i
}
 800090e:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 8000910:	2300      	movs	r3, #0
}
 8000912:	4618      	mov	r0, r3
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <main>:
static void_t appInitCommon(void_t);

/******************************************************************************/

int main(void_t)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	appInitCommon();
 8000920:	f000 f816 	bl	8000950 <appInitCommon>
	while(1)
	{
		ledControl_SetState(LED_GREEN_PORT,LED_GREEN,GPIO_PIN_SET);
 8000924:	2201      	movs	r2, #1
 8000926:	2105      	movs	r1, #5
 8000928:	4808      	ldr	r0, [pc, #32]	; (800094c <main+0x30>)
 800092a:	f000 f837 	bl	800099c <ledControl_SetState>
		delay_Ms(1000);
 800092e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000932:	f000 f883 	bl	8000a3c <delay_Ms>
		ledControl_SetState(LED_GREEN_PORT,LED_GREEN,GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2105      	movs	r1, #5
 800093a:	4804      	ldr	r0, [pc, #16]	; (800094c <main+0x30>)
 800093c:	f000 f82e 	bl	800099c <ledControl_SetState>
		delay_Ms(1000);
 8000940:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000944:	f000 f87a 	bl	8000a3c <delay_Ms>
		ledControl_SetState(LED_GREEN_PORT,LED_GREEN,GPIO_PIN_SET);
 8000948:	e7ec      	b.n	8000924 <main+0x8>
 800094a:	bf00      	nop
 800094c:	40020000 	.word	0x40020000

08000950 <appInitCommon>:
 * @brief  Initialize peripheral
 * @param  None
 * @retval None
 */
static void_t appInitCommon(void_t)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	SystemCoreClockUpdate();
 8000954:	f7ff fc74 	bl	8000240 <SystemCoreClockUpdate>
	led1Control_Init();
 8000958:	f000 f804 	bl	8000964 <led1Control_Init>
	time_Init();
 800095c:	f000 f84c 	bl	80009f8 <time_Init>
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}

08000964 <led1Control_Init>:

void_t led1Control_Init(void_t)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800096a:	2101      	movs	r1, #1
 800096c:	2001      	movs	r0, #1
 800096e:	f7ff fdcb 	bl	8000508 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000972:	2301      	movs	r3, #1
 8000974:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Pin = LED_GREEN_PIN;
 8000976:	2320      	movs	r3, #32
 8000978:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800097a:	2302      	movs	r3, #2
 800097c:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800097e:	2300      	movs	r3, #0
 8000980:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000982:	2302      	movs	r3, #2
 8000984:	71fb      	strb	r3, [r7, #7]

	GPIO_Init(LED_GREEN_PORT,&GPIO_InitStructure);
 8000986:	463b      	mov	r3, r7
 8000988:	4619      	mov	r1, r3
 800098a:	4803      	ldr	r0, [pc, #12]	; (8000998 <led1Control_Init+0x34>)
 800098c:	f7ff fd2c 	bl	80003e8 <GPIO_Init>
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40020000 	.word	0x40020000

0800099c <ledControl_SetState>:

void_t ledControl_SetState(GPIO_TypeDef *GPIOx,uint8_t GPIO_PIN,uint8_t Status)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	70fb      	strb	r3, [r7, #3]
 80009a8:	4613      	mov	r3, r2
 80009aa:	70bb      	strb	r3, [r7, #2]
	if(Status == GPIO_PIN_SET)
 80009ac:	78bb      	ldrb	r3, [r7, #2]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d10e      	bne.n	80009d0 <ledControl_SetState+0x34>
	{
		GPIOx ->BSRRL |= 1 <<GPIO_PIN;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	8b1b      	ldrh	r3, [r3, #24]
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	b21a      	sxth	r2, r3
 80009ba:	78fb      	ldrb	r3, [r7, #3]
 80009bc:	2101      	movs	r1, #1
 80009be:	fa01 f303 	lsl.w	r3, r1, r3
 80009c2:	b21b      	sxth	r3, r3
 80009c4:	4313      	orrs	r3, r2
 80009c6:	b21b      	sxth	r3, r3
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	831a      	strh	r2, [r3, #24]
	}
	else
	{
		GPIOx ->BSRRH |= 1 << GPIO_PIN;
	}
}
 80009ce:	e00d      	b.n	80009ec <ledControl_SetState+0x50>
		GPIOx ->BSRRH |= 1 << GPIO_PIN;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	8b5b      	ldrh	r3, [r3, #26]
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	b21a      	sxth	r2, r3
 80009d8:	78fb      	ldrb	r3, [r7, #3]
 80009da:	2101      	movs	r1, #1
 80009dc:	fa01 f303 	lsl.w	r3, r1, r3
 80009e0:	b21b      	sxth	r3, r3
 80009e2:	4313      	orrs	r3, r2
 80009e4:	b21b      	sxth	r3, r3
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	835a      	strh	r2, [r3, #26]
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <time_Init>:

void_t time_Init(void_t)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef Timer_InitStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 80009fe:	2101      	movs	r1, #1
 8000a00:	2001      	movs	r0, #1
 8000a02:	f7ff fda1 	bl	8000548 <RCC_APB2PeriphClockCmd>

	Timer_InitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000a06:	2300      	movs	r3, #0
 8000a08:	80fb      	strh	r3, [r7, #6]
	Timer_InitStructure.TIM_Prescaler = 83;
 8000a0a:	2353      	movs	r3, #83	; 0x53
 8000a0c:	80bb      	strh	r3, [r7, #4]
	Timer_InitStructure.TIM_Period = 999;
 8000a0e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000a12:	60bb      	str	r3, [r7, #8]
	Timer_InitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	81bb      	strh	r3, [r7, #12]
	Timer_InitStructure.TIM_RepetitionCounter = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	73bb      	strb	r3, [r7, #14]

	TIM_TimeBaseInit(TIM1,&Timer_InitStructure);
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4805      	ldr	r0, [pc, #20]	; (8000a38 <time_Init+0x40>)
 8000a22:	f7ff fdb1 	bl	8000588 <TIM_TimeBaseInit>
	TIM_Cmd(TIM1,ENABLE);
 8000a26:	2101      	movs	r1, #1
 8000a28:	4803      	ldr	r0, [pc, #12]	; (8000a38 <time_Init+0x40>)
 8000a2a:	f7ff fe33 	bl	8000694 <TIM_Cmd>
}
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40010000 	.word	0x40010000

08000a3c <delay_Ms>:
void_t delay_Ms(uint32_t ms)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	while( ms!=0 )
 8000a44:	e00f      	b.n	8000a66 <delay_Ms+0x2a>
	{
		TIM_SetCounter(TIM1,0);
 8000a46:	2100      	movs	r1, #0
 8000a48:	480b      	ldr	r0, [pc, #44]	; (8000a78 <delay_Ms+0x3c>)
 8000a4a:	f7ff fe09 	bl	8000660 <TIM_SetCounter>
		while(TIM_GetCounter(TIM1) != 999){};
 8000a4e:	bf00      	nop
 8000a50:	4809      	ldr	r0, [pc, #36]	; (8000a78 <delay_Ms+0x3c>)
 8000a52:	f7ff fe13 	bl	800067c <TIM_GetCounter>
 8000a56:	4603      	mov	r3, r0
 8000a58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d1f7      	bne.n	8000a50 <delay_Ms+0x14>
		ms--;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	607b      	str	r3, [r7, #4]
	while( ms!=0 )
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d1ec      	bne.n	8000a46 <delay_Ms+0xa>
	}
}
 8000a6c:	bf00      	nop
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40010000 	.word	0x40010000

08000a7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a7c:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a7e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a80:	f7ff fba8 	bl	80001d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a84:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a86:	490d      	ldr	r1, [pc, #52]	; (8000abc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a88:	4a0d      	ldr	r2, [pc, #52]	; (8000ac0 <LoopForever+0xe>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a8c:	e002      	b.n	8000a94 <LoopCopyDataInit>

08000a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a92:	3304      	adds	r3, #4

08000a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a98:	d3f9      	bcc.n	8000a8e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a9c:	4c0a      	ldr	r4, [pc, #40]	; (8000ac8 <LoopForever+0x16>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa0:	e001      	b.n	8000aa6 <LoopFillZerobss>

08000aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa4:	3204      	adds	r2, #4

08000aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa8:	d3fb      	bcc.n	8000aa2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000aaa:	f000 f811 	bl	8000ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aae:	f7ff ff35 	bl	800091c <main>

08000ab2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ab2:	e7fe      	b.n	8000ab2 <LoopForever>
  ldr   r0, =_estack
 8000ab4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000abc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ac0:	08000b38 	.word	0x08000b38
  ldr r2, =_sbss
 8000ac4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000ac8:	2000003c 	.word	0x2000003c

08000acc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000acc:	e7fe      	b.n	8000acc <ADC_IRQHandler>
	...

08000ad0 <__libc_init_array>:
 8000ad0:	b570      	push	{r4, r5, r6, lr}
 8000ad2:	4d0d      	ldr	r5, [pc, #52]	; (8000b08 <__libc_init_array+0x38>)
 8000ad4:	4c0d      	ldr	r4, [pc, #52]	; (8000b0c <__libc_init_array+0x3c>)
 8000ad6:	1b64      	subs	r4, r4, r5
 8000ad8:	10a4      	asrs	r4, r4, #2
 8000ada:	2600      	movs	r6, #0
 8000adc:	42a6      	cmp	r6, r4
 8000ade:	d109      	bne.n	8000af4 <__libc_init_array+0x24>
 8000ae0:	4d0b      	ldr	r5, [pc, #44]	; (8000b10 <__libc_init_array+0x40>)
 8000ae2:	4c0c      	ldr	r4, [pc, #48]	; (8000b14 <__libc_init_array+0x44>)
 8000ae4:	f000 f818 	bl	8000b18 <_init>
 8000ae8:	1b64      	subs	r4, r4, r5
 8000aea:	10a4      	asrs	r4, r4, #2
 8000aec:	2600      	movs	r6, #0
 8000aee:	42a6      	cmp	r6, r4
 8000af0:	d105      	bne.n	8000afe <__libc_init_array+0x2e>
 8000af2:	bd70      	pop	{r4, r5, r6, pc}
 8000af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000af8:	4798      	blx	r3
 8000afa:	3601      	adds	r6, #1
 8000afc:	e7ee      	b.n	8000adc <__libc_init_array+0xc>
 8000afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b02:	4798      	blx	r3
 8000b04:	3601      	adds	r6, #1
 8000b06:	e7f2      	b.n	8000aee <__libc_init_array+0x1e>
 8000b08:	08000b30 	.word	0x08000b30
 8000b0c:	08000b30 	.word	0x08000b30
 8000b10:	08000b30 	.word	0x08000b30
 8000b14:	08000b34 	.word	0x08000b34

08000b18 <_init>:
 8000b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b1a:	bf00      	nop
 8000b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b1e:	bc08      	pop	{r3}
 8000b20:	469e      	mov	lr, r3
 8000b22:	4770      	bx	lr

08000b24 <_fini>:
 8000b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b26:	bf00      	nop
 8000b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b2a:	bc08      	pop	{r3}
 8000b2c:	469e      	mov	lr, r3
 8000b2e:	4770      	bx	lr
